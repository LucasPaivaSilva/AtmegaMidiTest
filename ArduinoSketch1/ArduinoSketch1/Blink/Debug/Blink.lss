
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000018da  0000196e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000164  00800112  00800112  00001980  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008da5  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b1d  00000000  00000000  0000aa55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cbf  00000000  00000000  0000c572  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000898  00000000  00000000  0000e234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000411f  00000000  00000000  0000eacc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032f0  00000000  00000000  00012beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  00015edb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_11>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      40:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__vector_16>
      44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      48:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__vector_18>
      4c:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__vector_19>
      50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      68:	7c 03       	fmul	r23, r20
      6a:	dc 03       	fmulsu	r21, r20
      6c:	b2 03       	fmuls	r19, r18
      6e:	9a 03       	fmulsu	r17, r18
      70:	ff 03       	fmulsu	r23, r23
      72:	ff 03       	fmulsu	r23, r23
      74:	72 03       	mulsu	r23, r18
      76:	ff 03       	fmulsu	r23, r23
      78:	72 03       	mulsu	r23, r18
      7a:	ff 03       	fmulsu	r23, r23
      7c:	72 03       	mulsu	r23, r18
      7e:	72 03       	mulsu	r23, r18
      80:	72 03       	mulsu	r23, r18
      82:	ff 03       	fmulsu	r23, r23
      84:	72 03       	mulsu	r23, r18
      86:	72 03       	mulsu	r23, r18
      88:	07 63       	ori	r16, 0x37	; 55
      8a:	42 36       	cpi	r20, 0x62	; 98
      8c:	b7 9b       	sbis	0x16, 7	; 22
      8e:	d8 a7       	std	Y+40, r29	; 0x28
      90:	1a 39       	cpi	r17, 0x9A	; 154
      92:	68 56       	subi	r22, 0x68	; 104
      94:	18 ae       	std	Y+56, r1	; 0x38
      96:	ba ab       	std	Y+50, r27	; 0x32
      98:	55 8c       	ldd	r5, Z+29	; 0x1d
      9a:	1d 3c       	cpi	r17, 0xCD	; 205
      9c:	b7 cc       	rjmp	.-1682   	; 0xfffffa0c <__eeprom_end+0xff7efa0c>
      9e:	57 63       	ori	r21, 0x37	; 55
      a0:	bd 6d       	ori	r27, 0xDD	; 221
      a2:	ed fd       	.word	0xfded	; ????
      a4:	75 3e       	cpi	r23, 0xE5	; 229
      a6:	f6 17       	cp	r31, r22
      a8:	72 31       	cpi	r23, 0x12	; 18
      aa:	bf 00       	.word	0x00bf	; ????
      ac:	00 00       	nop
      ae:	80 3f       	cpi	r24, 0xF0	; 240
      b0:	08 00       	.word	0x0008	; ????
      b2:	00 00       	nop
      b4:	be 92       	st	-X, r11
      b6:	24 49       	sbci	r18, 0x94	; 148
      b8:	12 3e       	cpi	r17, 0xE2	; 226
      ba:	ab aa       	std	Y+51, r10	; 0x33
      bc:	aa 2a       	or	r10, r26
      be:	be cd       	rjmp	.-1156   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
      c0:	cc cc       	rjmp	.-1640   	; 0xfffffa5a <__eeprom_end+0xff7efa5a>
      c2:	4c 3e       	cpi	r20, 0xEC	; 236
      c4:	00 00       	nop
      c6:	00 80       	ld	r0, Z
      c8:	be ab       	std	Y+54, r27	; 0x36
      ca:	aa aa       	std	Y+50, r10	; 0x32
      cc:	aa 3e       	cpi	r26, 0xEA	; 234
      ce:	00 00       	nop
      d0:	00 00       	nop
      d2:	bf 00       	.word	0x00bf	; ????
      d4:	00 00       	nop
      d6:	80 3f       	cpi	r24, 0xF0	; 240
      d8:	00 00       	nop
      da:	00 00       	nop
      dc:	00 08       	sbc	r0, r0
      de:	41 78       	andi	r20, 0x81	; 129
      e0:	d3 bb       	out	0x13, r29	; 19
      e2:	43 87       	std	Z+11, r20	; 0x0b
      e4:	d1 13       	cpse	r29, r17
      e6:	3d 19       	sub	r19, r13
      e8:	0e 3c       	cpi	r16, 0xCE	; 206
      ea:	c3 bd       	out	0x23, r28	; 35
      ec:	42 82       	std	Z+2, r4	; 0x02
      ee:	ad 2b       	or	r26, r29
      f0:	3e 68       	ori	r19, 0x8E	; 142
      f2:	ec 82       	std	Y+4, r14	; 0x04
      f4:	76 be       	out	0x36, r7	; 54
      f6:	d9 8f       	std	Y+25, r29	; 0x19
      f8:	e1 a9       	ldd	r30, Z+49	; 0x31
      fa:	3e 4c       	sbci	r19, 0xCE	; 206
      fc:	80 ef       	ldi	r24, 0xF0	; 240
      fe:	ff be       	out	0x3f, r15	; 63
     100:	01 c4       	rjmp	.+2050   	; 0x904 <__stack+0x5>
     102:	ff 7f       	andi	r31, 0xFF	; 255
     104:	3f 00       	.word	0x003f	; ????
     106:	00 00       	nop
	...

0000010a <__ctors_start>:
     10a:	a9 05       	cpc	r26, r9
     10c:	2d 0b       	sbc	r18, r29

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d8 e0       	ldi	r29, 0x08	; 8
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	ea ed       	ldi	r30, 0xDA	; 218
     122:	f8 e1       	ldi	r31, 0x18	; 24
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
     126:	05 90       	lpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	a2 31       	cpi	r26, 0x12	; 18
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
     130:	22 e0       	ldi	r18, 0x02	; 2
     132:	a2 e1       	ldi	r26, 0x12	; 18
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	a6 37       	cpi	r26, 0x76	; 118
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>

00000140 <__do_global_ctors>:
     140:	10 e0       	ldi	r17, 0x00	; 0
     142:	c7 e8       	ldi	r28, 0x87	; 135
     144:	d0 e0       	ldi	r29, 0x00	; 0
     146:	04 c0       	rjmp	.+8      	; 0x150 <__do_global_ctors+0x10>
     148:	21 97       	sbiw	r28, 0x01	; 1
     14a:	fe 01       	movw	r30, r28
     14c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__tablejump2__>
     150:	c5 38       	cpi	r28, 0x85	; 133
     152:	d1 07       	cpc	r29, r17
     154:	c9 f7       	brne	.-14     	; 0x148 <__do_global_ctors+0x8>
     156:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <main>
     15a:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <_exit>

0000015e <__bad_interrupt>:
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE12sendRealTimeENS_8MidiTypeE.isra.8>:
  TCCR1A = 0x00;                        // CTC mode, hardware pins disconnected
  TCCR1B = (1 << CS11) | (1 << WGM12);  // CTC mode, set prescaler to divide by 8 for 1 / 2MHz or 0.5uS per tick (clkio = 16MHz)
}

void setupInterrupts() {
  sei();    // Enable global interrupts to be safe, nothing else to do here
     162:	6d 3f       	cpi	r22, 0xFD	; 253
     164:	28 f4       	brcc	.+10     	; 0x170 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE12sendRealTimeENS_8MidiTypeE.isra.8+0xe>
     166:	6a 3f       	cpi	r22, 0xFA	; 250
     168:	28 f4       	brcc	.+10     	; 0x174 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE12sendRealTimeENS_8MidiTypeE.isra.8+0x12>
     16a:	68 3f       	cpi	r22, 0xF8	; 248
     16c:	69 f4       	brne	.+26     	; 0x188 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE12sendRealTimeENS_8MidiTypeE.isra.8+0x26>
     16e:	02 c0       	rjmp	.+4      	; 0x174 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE12sendRealTimeENS_8MidiTypeE.isra.8+0x12>
     170:	6e 3f       	cpi	r22, 0xFE	; 254
     172:	50 f0       	brcs	.+20     	; 0x188 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE12sendRealTimeENS_8MidiTypeE.isra.8+0x26>
     174:	dc 01       	movw	r26, r24
     176:	8d 91       	ld	r24, X+
     178:	9c 91       	ld	r25, X
     17a:	dc 01       	movw	r26, r24
     17c:	ed 91       	ld	r30, X+
     17e:	fc 91       	ld	r31, X
     180:	01 90       	ld	r0, Z+
     182:	f0 81       	ld	r31, Z
     184:	e0 2d       	mov	r30, r0
     186:	09 94       	ijmp
     188:	08 95       	ret

0000018a <_ZN14HardwareSerial5writeEj>:
     18a:	dc 01       	movw	r26, r24
     18c:	ed 91       	ld	r30, X+
     18e:	fc 91       	ld	r31, X
     190:	01 90       	ld	r0, Z+
     192:	f0 81       	ld	r31, Z
     194:	e0 2d       	mov	r30, r0
     196:	09 94       	ijmp

00000198 <_ZN14HardwareSerial5writeEi>:
     198:	dc 01       	movw	r26, r24
     19a:	ed 91       	ld	r30, X+
     19c:	fc 91       	ld	r31, X
     19e:	01 90       	ld	r0, Z+
     1a0:	f0 81       	ld	r31, Z
     1a2:	e0 2d       	mov	r30, r0
     1a4:	09 94       	ijmp

000001a6 <_Z11setupTimersv>:
     1a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     1aa:	8a e0       	ldi	r24, 0x0A	; 10
     1ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     1b0:	08 95       	ret

000001b2 <setup>:
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	52 9a       	sbi	0x0a, 2	; 10
     1b8:	5a 98       	cbi	0x0b, 2	; 11
     1ba:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z11setupTimersv>
     1be:	78 94       	sei
     1c0:	c6 e1       	ldi	r28, 0x16	; 22
     1c2:	d1 e0       	ldi	r29, 0x01	; 1
     1c4:	26 e0       	ldi	r18, 0x06	; 6
     1c6:	42 e1       	ldi	r20, 0x12	; 18
     1c8:	5a e7       	ldi	r21, 0x7A	; 122
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	8c a1       	ldd	r24, Y+36	; 0x24
     1d0:	9d a1       	ldd	r25, Y+37	; 0x25
     1d2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN14HardwareSerial5beginEmh>
     1d6:	1e a2       	std	Y+38, r1	; 0x26
     1d8:	18 a6       	std	Y+40, r1	; 0x28
     1da:	1f a2       	std	Y+39, r1	; 0x27
     1dc:	1f a6       	std	Y+47, r1	; 0x2f
     1de:	1e a6       	std	Y+46, r1	; 0x2e
     1e0:	1d a6       	std	Y+45, r1	; 0x2d
     1e2:	1c a6       	std	Y+44, r1	; 0x2c
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	9f ef       	ldi	r25, 0xFF	; 255
     1e8:	99 ab       	std	Y+49, r25	; 0x31
     1ea:	88 ab       	std	Y+48, r24	; 0x30
     1ec:	9b ab       	std	Y+51, r25	; 0x33
     1ee:	8a ab       	std	Y+50, r24	; 0x32
     1f0:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <MIDI+0xb9>
     1f4:	1e aa       	std	Y+54, r1	; 0x36
     1f6:	1d aa       	std	Y+53, r1	; 0x35
     1f8:	1f aa       	std	Y+55, r1	; 0x37
     1fa:	18 ae       	std	Y+56, r1	; 0x38
     1fc:	ea e4       	ldi	r30, 0x4A	; 74
     1fe:	f1 e0       	ldi	r31, 0x01	; 1
     200:	80 81       	ld	r24, Z
     202:	81 70       	andi	r24, 0x01	; 1
     204:	82 60       	ori	r24, 0x02	; 2
     206:	81 60       	ori	r24, 0x01	; 1
     208:	80 83       	st	Z, r24
     20a:	88 e5       	ldi	r24, 0x58	; 88
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	9b 83       	std	Y+3, r25	; 0x03
     210:	8a 83       	std	Y+2, r24	; 0x02
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <_Z10findOnTimei>:

// Pulsewidth lookup table
int findOnTime(int frequency_input) {
  int on_time = 17;
  if (frequency_input < 1000) {on_time = 17;}
  if (frequency_input < 900)  {on_time = 18;}  
     218:	84 38       	cpi	r24, 0x84	; 132
     21a:	23 e0       	ldi	r18, 0x03	; 3
     21c:	92 07       	cpc	r25, r18
     21e:	24 f5       	brge	.+72     	; 0x268 <_Z10findOnTimei+0x50>
  if (frequency_input < 800)  {on_time = 20;}
     220:	80 32       	cpi	r24, 0x20	; 32
     222:	23 e0       	ldi	r18, 0x03	; 3
     224:	92 07       	cpc	r25, r18
     226:	1c f5       	brge	.+70     	; 0x26e <_Z10findOnTimei+0x56>
  if (frequency_input < 700)  {on_time = 20;}
     228:	8c 3b       	cpi	r24, 0xBC	; 188
     22a:	22 e0       	ldi	r18, 0x02	; 2
     22c:	92 07       	cpc	r25, r18
     22e:	14 f5       	brge	.+68     	; 0x274 <_Z10findOnTimei+0x5c>
  if (frequency_input < 600)  {on_time = 23;}
     230:	88 35       	cpi	r24, 0x58	; 88
     232:	22 e0       	ldi	r18, 0x02	; 2
     234:	92 07       	cpc	r25, r18
     236:	f4 f4       	brge	.+60     	; 0x274 <_Z10findOnTimei+0x5c>
  if (frequency_input < 500)  {on_time = 27;}
     238:	84 3f       	cpi	r24, 0xF4	; 244
     23a:	21 e0       	ldi	r18, 0x01	; 1
     23c:	92 07       	cpc	r25, r18
     23e:	ec f4       	brge	.+58     	; 0x27a <_Z10findOnTimei+0x62>
  if (frequency_input < 400)  {on_time = 30;}  
     240:	80 39       	cpi	r24, 0x90	; 144
     242:	21 e0       	ldi	r18, 0x01	; 1
     244:	92 07       	cpc	r25, r18
     246:	e4 f4       	brge	.+56     	; 0x280 <_Z10findOnTimei+0x68>
  if (frequency_input < 300)  {on_time = 35;}
     248:	8c 32       	cpi	r24, 0x2C	; 44
     24a:	21 e0       	ldi	r18, 0x01	; 1
     24c:	92 07       	cpc	r25, r18
     24e:	dc f4       	brge	.+54     	; 0x286 <_Z10findOnTimei+0x6e>
  if (frequency_input < 200)  {on_time = 40;}
     250:	88 3c       	cpi	r24, 0xC8	; 200
     252:	91 05       	cpc	r25, r1
     254:	dc f4       	brge	.+54     	; 0x28c <_Z10findOnTimei+0x74>
  if (frequency_input < 100)  {on_time = 45;}       
     256:	84 36       	cpi	r24, 0x64	; 100
     258:	91 05       	cpc	r25, r1
     25a:	1c f4       	brge	.+6      	; 0x262 <_Z10findOnTimei+0x4a>
     25c:	6d e2       	ldi	r22, 0x2D	; 45
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	17 c0       	rjmp	.+46     	; 0x290 <_Z10findOnTimei+0x78>
  if (frequency_input < 700)  {on_time = 20;}
  if (frequency_input < 600)  {on_time = 23;}
  if (frequency_input < 500)  {on_time = 27;}
  if (frequency_input < 400)  {on_time = 30;}  
  if (frequency_input < 300)  {on_time = 35;}
  if (frequency_input < 200)  {on_time = 40;}
     262:	68 e2       	ldi	r22, 0x28	; 40
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	14 c0       	rjmp	.+40     	; 0x290 <_Z10findOnTimei+0x78>
     268:	61 e1       	ldi	r22, 0x11	; 17
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	11 c0       	rjmp	.+34     	; 0x290 <_Z10findOnTimei+0x78>

// Pulsewidth lookup table
int findOnTime(int frequency_input) {
  int on_time = 17;
  if (frequency_input < 1000) {on_time = 17;}
  if (frequency_input < 900)  {on_time = 18;}  
     26e:	62 e1       	ldi	r22, 0x12	; 18
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	0e c0       	rjmp	.+28     	; 0x290 <_Z10findOnTimei+0x78>
  if (frequency_input < 800)  {on_time = 20;}
  if (frequency_input < 700)  {on_time = 20;}
     274:	64 e1       	ldi	r22, 0x14	; 20
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	0b c0       	rjmp	.+22     	; 0x290 <_Z10findOnTimei+0x78>
  if (frequency_input < 600)  {on_time = 23;}
     27a:	67 e1       	ldi	r22, 0x17	; 23
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	08 c0       	rjmp	.+16     	; 0x290 <_Z10findOnTimei+0x78>
  if (frequency_input < 500)  {on_time = 27;}
     280:	6b e1       	ldi	r22, 0x1B	; 27
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	05 c0       	rjmp	.+10     	; 0x290 <_Z10findOnTimei+0x78>
  if (frequency_input < 400)  {on_time = 30;}  
     286:	6e e1       	ldi	r22, 0x1E	; 30
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <_Z10findOnTimei+0x78>
  if (frequency_input < 300)  {on_time = 35;}
     28c:	63 e2       	ldi	r22, 0x23	; 35
     28e:	70 e0       	ldi	r23, 0x00	; 0
  if (frequency_input < 200)  {on_time = 40;}
  if (frequency_input < 100)  {on_time = 45;}       
  on_time *= PW_TABLE_MULTIPLIER;
     290:	07 2e       	mov	r0, r23
     292:	00 0c       	add	r0, r0
     294:	88 0b       	sbc	r24, r24
     296:	99 0b       	sbc	r25, r25
     298:	0e 94 9a 06 	call	0xd34	; 0xd34 <__floatsisf>
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 ec       	ldi	r20, 0xC0	; 192
     2a2:	5f e3       	ldi	r21, 0x3F	; 63
     2a4:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3>
  return on_time;
     2a8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fixsfsi>
}
     2ac:	cb 01       	movw	r24, r22
     2ae:	08 95       	ret

000002b0 <_Z12HandleNoteOnhhh>:
void loop() {
  MIDI.read();
}

// MIDI callback functions
void HandleNoteOn(byte channel, byte pitch, byte velocity) {
     2b0:	cf 92       	push	r12
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
  if (channel == 1) {
     2b8:	81 30       	cpi	r24, 0x01	; 1
     2ba:	09 f0       	breq	.+2      	; 0x2be <_Z12HandleNoteOnhhh+0xe>
     2bc:	58 c0       	rjmp	.+176    	; 0x36e <_Z12HandleNoteOnhhh+0xbe>
     2be:	70 e0       	ldi	r23, 0x00	; 0
    if (velocity == 0) {  // Note off
     2c0:	41 11       	cpse	r20, r1
     2c2:	0c c0       	rjmp	.+24     	; 0x2dc <_Z12HandleNoteOnhhh+0x2c>
      if (pitch == current_pitch) {
     2c4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     2c8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
     2cc:	68 17       	cp	r22, r24
     2ce:	79 07       	cpc	r23, r25
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <_Z12HandleNoteOnhhh+0x24>
     2d2:	4d c0       	rjmp	.+154    	; 0x36e <_Z12HandleNoteOnhhh+0xbe>
        TIMSK1 &= ~(1 << OCIE1A);    // Disable Timer1's overflow interrupt to halt the output
     2d4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     2d8:	8d 7f       	andi	r24, 0xFD	; 253
     2da:	47 c0       	rjmp	.+142    	; 0x36a <_Z12HandleNoteOnhhh+0xba>
      }
    }
    else {  // Note on
        TIMSK1 &= ~(1 << OCIE1A);    // Disable Timer1's overflow interrupt to halt the output
     2dc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     2e0:	8d 7f       	andi	r24, 0xFD	; 253
     2e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
        
        current_pitch = pitch;  // Store the pitch that will be played
     2e6:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <__data_end+0x1>
     2ea:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <__data_end>
        
        int frequency = (int) (220.0 * pow(pow(2.0, 1.0/12.0), pitch - 57) + 0.5);  // Decypher the pitch number
     2ee:	69 53       	subi	r22, 0x39	; 57
     2f0:	71 09       	sbc	r23, r1
     2f2:	07 2e       	mov	r0, r23
     2f4:	00 0c       	add	r0, r0
     2f6:	88 0b       	sbc	r24, r24
     2f8:	99 0b       	sbc	r25, r25
     2fa:	0e 94 9a 06 	call	0xd34	; 0xd34 <__floatsisf>
     2fe:	9b 01       	movw	r18, r22
     300:	ac 01       	movw	r20, r24
     302:	6d e7       	ldi	r22, 0x7D	; 125
     304:	7c e9       	ldi	r23, 0x9C	; 156
     306:	87 e8       	ldi	r24, 0x87	; 135
     308:	9f e3       	ldi	r25, 0x3F	; 63
     30a:	0e 94 93 07 	call	0xf26	; 0xf26 <pow>
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	4c e5       	ldi	r20, 0x5C	; 92
     314:	53 e4       	ldi	r21, 0x43	; 67
     316:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3>
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	5f e3       	ldi	r21, 0x3F	; 63
     322:	0e 94 f6 05 	call	0xbec	; 0xbec <__addsf3>
     326:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fixsfsi>
     32a:	6b 01       	movw	r12, r22
     32c:	7c 01       	movw	r14, r24
        int period = 1000000 / frequency;                                           // Perform period and calculation
        on_time = findOnTime(frequency);                                            // Get a value from the pulsewidth lookup table
     32e:	cb 01       	movw	r24, r22
     330:	0e 94 0c 01 	call	0x218	; 0x218 <_Z10findOnTimei>
     334:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <on_time+0x1>
     338:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <on_time>
        
        OCR1A   = 2 * period;     // Set the compare value
     33c:	96 01       	movw	r18, r12
     33e:	dd 0c       	add	r13, r13
     340:	44 0b       	sbc	r20, r20
     342:	55 0b       	sbc	r21, r21
     344:	60 e4       	ldi	r22, 0x40	; 64
     346:	72 e4       	ldi	r23, 0x42	; 66
     348:	8f e0       	ldi	r24, 0x0F	; 15
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 46 0c 	call	0x188c	; 0x188c <__divmodsi4>
     350:	22 0f       	add	r18, r18
     352:	33 1f       	adc	r19, r19
     354:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     358:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
        TCNT1   = 0;              // Reset Timer1
     35c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     360:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
        TIMSK1 |= (1 << OCIE1A);  // Enable the compare interrupt (start playing the note)
     364:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     368:	82 60       	ori	r24, 0x02	; 2
     36a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    }
  }
  else {
    // Ignore the command if it wasn't on channel 1 - this part may depend on the particular MIDI instrument you use, so modify the code here if you encounter a problem!
  }
}
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	cf 90       	pop	r12
     376:	08 95       	ret

00000378 <__vector_11>:
  return on_time;
}

// Interrupt vectors
// Timer1 Compare Interrupt - signals when it's time to start a bang
ISR (TIMER1_COMPA_vect) {
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	2f 93       	push	r18
     384:	3f 93       	push	r19
     386:	4f 93       	push	r20
     388:	5f 93       	push	r21
     38a:	6f 93       	push	r22
     38c:	7f 93       	push	r23
     38e:	8f 93       	push	r24
     390:	9f 93       	push	r25
     392:	af 93       	push	r26
     394:	bf 93       	push	r27
     396:	ef 93       	push	r30
     398:	ff 93       	push	r31
  PORTD |= (1 << 2);           // Set the optical transmit pin high
     39a:	5a 9a       	sbi	0x0b, 2	; 11
  delayMicroseconds(on_time);  // Wait
     39c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <on_time>
     3a0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <on_time+0x1>
     3a4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <delayMicroseconds>
  PORTD &= ~(1 << 2);          // Set the optical transmit pin low
     3a8:	5a 98       	cbi	0x0b, 2	; 11
}
     3aa:	ff 91       	pop	r31
     3ac:	ef 91       	pop	r30
     3ae:	bf 91       	pop	r27
     3b0:	af 91       	pop	r26
     3b2:	9f 91       	pop	r25
     3b4:	8f 91       	pop	r24
     3b6:	7f 91       	pop	r23
     3b8:	6f 91       	pop	r22
     3ba:	5f 91       	pop	r21
     3bc:	4f 91       	pop	r20
     3be:	3f 91       	pop	r19
     3c0:	2f 91       	pop	r18
     3c2:	0f 90       	pop	r0
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	0f 90       	pop	r0
     3c8:	1f 90       	pop	r1
     3ca:	18 95       	reti

000003cc <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv>:

/*! @} */ // End of doc group MIDI Callbacks

// Private - launch callback function based on received type.
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::launchCallback()
     3cc:	dc 01       	movw	r26, r24
{
    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     3ce:	d6 96       	adiw	r26, 0x36	; 54
     3d0:	8c 91       	ld	r24, X
     3d2:	d6 97       	sbiw	r26, 0x36	; 54
     3d4:	81 3f       	cpi	r24, 0xF1	; 241
     3d6:	09 f4       	brne	.+2      	; 0x3da <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0xe>
     3d8:	a5 c0       	rjmp	.+330    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     3da:	f0 f4       	brcc	.+60     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3dc:	80 3b       	cpi	r24, 0xB0	; 176
     3de:	09 f4       	brne	.+2      	; 0x3e2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x16>
     3e0:	50 c0       	rjmp	.+160    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     3e2:	60 f4       	brcc	.+24     	; 0x3fc <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x30>
     3e4:	80 39       	cpi	r24, 0x90	; 144
     3e6:	79 f1       	breq	.+94     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     3e8:	80 3a       	cpi	r24, 0xA0	; 160
     3ea:	09 f4       	brne	.+2      	; 0x3ee <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x22>
     3ec:	67 c0       	rjmp	.+206    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     3ee:	80 38       	cpi	r24, 0x80	; 128
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x28>
     3f2:	c5 c0       	rjmp	.+394    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
    {
            // Notes
        case NoteOff:               if (mNoteOffCallback != 0)               mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);   break;
     3f4:	ed 91       	ld	r30, X+
     3f6:	fc 91       	ld	r31, X
     3f8:	11 97       	sbiw	r26, 0x01	; 1
     3fa:	64 c0       	rjmp	.+200    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
// Private - launch callback function based on received type.
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::launchCallback()
{
    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
     3fc:	80 3d       	cpi	r24, 0xD0	; 208
     3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	6d c0       	rjmp	.+218    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     402:	20 f4       	brcc	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     404:	80 3c       	cpi	r24, 0xC0	; 192
     406:	09 f4       	brne	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	6e c0       	rjmp	.+220    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     40a:	08 95       	ret
     40c:	80 3e       	cpi	r24, 0xE0	; 224
     40e:	f1 f1       	breq	.+124    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     410:	80 3f       	cpi	r24, 0xF0	; 240
     412:	09 f4       	brne	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	75 c0       	rjmp	.+234    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     416:	08 95       	ret
     418:	8a 3f       	cpi	r24, 0xFA	; 250
     41a:	f9 f0       	breq	.+62     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     41c:	58 f4       	brcc	.+22     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     41e:	83 3f       	cpi	r24, 0xF3	; 243
     420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	98 c0       	rjmp	.+304    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     424:	08 f4       	brcc	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	83 c0       	rjmp	.+262    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     428:	86 3f       	cpi	r24, 0xF6	; 246
     42a:	09 f4       	brne	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	9c c0       	rjmp	.+312    	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     42e:	88 3f       	cpi	r24, 0xF8	; 248
     430:	79 f0       	breq	.+30     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     432:	08 95       	ret
     434:	8c 3f       	cpi	r24, 0xFC	; 252
     436:	d9 f0       	breq	.+54     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     438:	a8 f0       	brcs	.+42     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     43a:	8e 3f       	cpi	r24, 0xFE	; 254
     43c:	e9 f0       	breq	.+58     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     43e:	8f 3f       	cpi	r24, 0xFF	; 255
     440:	09 f4       	brne	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	96 c0       	rjmp	.+300    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     444:	08 95       	ret
    {
            // Notes
        case NoteOff:               if (mNoteOffCallback != 0)               mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);   break;
        case NoteOn:                if (mNoteOnCallback != 0)                mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     446:	12 96       	adiw	r26, 0x02	; 2
     448:	ed 91       	ld	r30, X+
     44a:	fc 91       	ld	r31, X
     44c:	13 97       	sbiw	r26, 0x03	; 3
     44e:	3a c0       	rjmp	.+116    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>

            // Real-time messages
        case Clock:                 if (mClockCallback != 0)                 mClockCallback();           break;
     450:	58 96       	adiw	r26, 0x18	; 24
     452:	ed 91       	ld	r30, X+
     454:	fc 91       	ld	r31, X
     456:	59 97       	sbiw	r26, 0x19	; 25
     458:	8f c0       	rjmp	.+286    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
        case Start:                 if (mStartCallback != 0)                 mStartCallback();           break;
     45a:	5a 96       	adiw	r26, 0x1a	; 26
     45c:	ed 91       	ld	r30, X+
     45e:	fc 91       	ld	r31, X
     460:	5b 97       	sbiw	r26, 0x1b	; 27
     462:	8a c0       	rjmp	.+276    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
        case Continue:              if (mContinueCallback != 0)              mContinueCallback();        break;
     464:	5c 96       	adiw	r26, 0x1c	; 28
     466:	ed 91       	ld	r30, X+
     468:	fc 91       	ld	r31, X
     46a:	5d 97       	sbiw	r26, 0x1d	; 29
     46c:	85 c0       	rjmp	.+266    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
        case Stop:                  if (mStopCallback != 0)                  mStopCallback();            break;
     46e:	5e 96       	adiw	r26, 0x1e	; 30
     470:	ed 91       	ld	r30, X+
     472:	fc 91       	ld	r31, X
     474:	5f 97       	sbiw	r26, 0x1f	; 31
     476:	80 c0       	rjmp	.+256    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
        case ActiveSensing:         if (mActiveSensingCallback != 0)         mActiveSensingCallback();   break;
     478:	90 96       	adiw	r26, 0x20	; 32
     47a:	ed 91       	ld	r30, X+
     47c:	fc 91       	ld	r31, X
     47e:	91 97       	sbiw	r26, 0x21	; 33
     480:	7b c0       	rjmp	.+246    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != 0)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     482:	16 96       	adiw	r26, 0x06	; 6
     484:	ed 91       	ld	r30, X+
     486:	fc 91       	ld	r31, X
     488:	17 97       	sbiw	r26, 0x07	; 7
     48a:	1c c0       	rjmp	.+56     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
        case PitchBend:             if (mPitchBendCallback != 0)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break; // TODO: check this
     48c:	1c 96       	adiw	r26, 0x0c	; 12
     48e:	ed 91       	ld	r30, X+
     490:	fc 91       	ld	r31, X
     492:	1d 97       	sbiw	r26, 0x0d	; 13
     494:	30 97       	sbiw	r30, 0x00	; 0
     496:	09 f4       	brne	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     498:	72 c0       	rjmp	.+228    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     49a:	d8 96       	adiw	r26, 0x38	; 56
     49c:	6c 91       	ld	r22, X
     49e:	d8 97       	sbiw	r26, 0x38	; 56
     4a0:	6f 77       	andi	r22, 0x7F	; 127
     4a2:	20 e8       	ldi	r18, 0x80	; 128
     4a4:	62 9f       	mul	r22, r18
     4a6:	b0 01       	movw	r22, r0
     4a8:	11 24       	eor	r1, r1
     4aa:	d7 96       	adiw	r26, 0x37	; 55
     4ac:	8c 91       	ld	r24, X
     4ae:	d7 97       	sbiw	r26, 0x37	; 55
     4b0:	8f 77       	andi	r24, 0x7F	; 127
     4b2:	68 2b       	or	r22, r24
     4b4:	70 52       	subi	r23, 0x20	; 32
     4b6:	d5 96       	adiw	r26, 0x35	; 53
     4b8:	8c 91       	ld	r24, X
     4ba:	09 94       	ijmp
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != 0)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
     4bc:	14 96       	adiw	r26, 0x04	; 4
     4be:	ed 91       	ld	r30, X+
     4c0:	fc 91       	ld	r31, X
     4c2:	15 97       	sbiw	r26, 0x05	; 5
     4c4:	30 97       	sbiw	r30, 0x00	; 0
     4c6:	09 f4       	brne	.+2      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4c8:	5a c0       	rjmp	.+180    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     4ca:	d8 96       	adiw	r26, 0x38	; 56
     4cc:	4c 91       	ld	r20, X
     4ce:	d8 97       	sbiw	r26, 0x38	; 56
     4d0:	d7 96       	adiw	r26, 0x37	; 55
     4d2:	6c 91       	ld	r22, X
     4d4:	d7 97       	sbiw	r26, 0x37	; 55
     4d6:	d5 96       	adiw	r26, 0x35	; 53
     4d8:	8c 91       	ld	r24, X
     4da:	09 94       	ijmp
        case AfterTouchChannel:     if (mAfterTouchChannelCallback != 0)     mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);    break;
     4dc:	1a 96       	adiw	r26, 0x0a	; 10
     4de:	ed 91       	ld	r30, X+
     4e0:	fc 91       	ld	r31, X
     4e2:	1b 97       	sbiw	r26, 0x0b	; 11
     4e4:	04 c0       	rjmp	.+8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>

        case ProgramChange:         if (mProgramChangeCallback != 0)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
     4e6:	18 96       	adiw	r26, 0x08	; 8
     4e8:	ed 91       	ld	r30, X+
     4ea:	fc 91       	ld	r31, X
     4ec:	19 97       	sbiw	r26, 0x09	; 9
     4ee:	30 97       	sbiw	r30, 0x00	; 0
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f2:	45 c0       	rjmp	.+138    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     4f4:	d7 96       	adiw	r26, 0x37	; 55
     4f6:	6c 91       	ld	r22, X
     4f8:	d7 97       	sbiw	r26, 0x37	; 55
     4fa:	d5 96       	adiw	r26, 0x35	; 53
     4fc:	8c 91       	ld	r24, X
     4fe:	09 94       	ijmp
        case SystemExclusive:       if (mSystemExclusiveCallback != 0)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;
     500:	1e 96       	adiw	r26, 0x0e	; 14
     502:	ed 91       	ld	r30, X+
     504:	fc 91       	ld	r31, X
     506:	1f 97       	sbiw	r26, 0x0f	; 15
     508:	30 97       	sbiw	r30, 0x00	; 0
     50a:	c9 f1       	breq	.+114    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     50c:	d7 96       	adiw	r26, 0x37	; 55
     50e:	6d 91       	ld	r22, X+
     510:	7c 91       	ld	r23, X
     512:	d8 97       	sbiw	r26, 0x38	; 56
     514:	61 38       	cpi	r22, 0x81	; 129
     516:	71 05       	cpc	r23, r1
     518:	10 f0       	brcs	.+4      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     51a:	60 e8       	ldi	r22, 0x80	; 128
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	cd 01       	movw	r24, r26
     520:	c9 96       	adiw	r24, 0x39	; 57
     522:	09 94       	ijmp

            // Occasional messages
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != 0)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
     524:	50 96       	adiw	r26, 0x10	; 16
     526:	ed 91       	ld	r30, X+
     528:	fc 91       	ld	r31, X
     52a:	51 97       	sbiw	r26, 0x11	; 17
     52c:	17 c0       	rjmp	.+46     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
        case SongPosition:          if (mSongPositionCallback != 0)          mSongPositionCallback(unsigned((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)));    break;
     52e:	52 96       	adiw	r26, 0x12	; 18
     530:	ed 91       	ld	r30, X+
     532:	fc 91       	ld	r31, X
     534:	53 97       	sbiw	r26, 0x13	; 19
     536:	30 97       	sbiw	r30, 0x00	; 0
     538:	11 f1       	breq	.+68     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     53a:	d8 96       	adiw	r26, 0x38	; 56
     53c:	8c 91       	ld	r24, X
     53e:	d8 97       	sbiw	r26, 0x38	; 56
     540:	8f 77       	andi	r24, 0x7F	; 127
     542:	20 e8       	ldi	r18, 0x80	; 128
     544:	82 9f       	mul	r24, r18
     546:	c0 01       	movw	r24, r0
     548:	11 24       	eor	r1, r1
     54a:	d7 96       	adiw	r26, 0x37	; 55
     54c:	2c 91       	ld	r18, X
     54e:	2f 77       	andi	r18, 0x7F	; 127
     550:	82 2b       	or	r24, r18
     552:	09 94       	ijmp
        case SongSelect:            if (mSongSelectCallback != 0)            mSongSelectCallback(mMessage.data1);    break;
     554:	54 96       	adiw	r26, 0x14	; 20
     556:	ed 91       	ld	r30, X+
     558:	fc 91       	ld	r31, X
     55a:	55 97       	sbiw	r26, 0x15	; 21
     55c:	30 97       	sbiw	r30, 0x00	; 0
     55e:	79 f0       	breq	.+30     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     560:	d7 96       	adiw	r26, 0x37	; 55
     562:	8c 91       	ld	r24, X
     564:	09 94       	ijmp
        case TuneRequest:           if (mTuneRequestCallback != 0)           mTuneRequestCallback();    break;
     566:	56 96       	adiw	r26, 0x16	; 22
     568:	ed 91       	ld	r30, X+
     56a:	fc 91       	ld	r31, X
     56c:	57 97       	sbiw	r26, 0x17	; 23
     56e:	04 c0       	rjmp	.+8      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>

        case SystemReset:           if (mSystemResetCallback != 0)           mSystemResetCallback();    break;
     570:	92 96       	adiw	r26, 0x22	; 34
     572:	ed 91       	ld	r30, X+
     574:	fc 91       	ld	r31, X
     576:	93 97       	sbiw	r26, 0x23	; 35
     578:	30 97       	sbiw	r30, 0x00	; 0
     57a:	09 f0       	breq	.+2      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     57c:	09 94       	ijmp
     57e:	08 95       	ret

00000580 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE16isChannelMessageENS_8MidiTypeE>:
{
    return Channel((inStatus & 0x0f) + 1);
}

template<class SerialPort, class Settings>
bool MidiInterface<SerialPort, Settings>::isChannelMessage(MidiType inType)
     580:	98 2f       	mov	r25, r24
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
            inType == PitchBend         ||
            inType == ProgramChange);
     582:	8f 7c       	andi	r24, 0xCF	; 207
     584:	80 38       	cpi	r24, 0x80	; 128
     586:	49 f0       	breq	.+18     	; 0x59a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE16isChannelMessageENS_8MidiTypeE+0x1a>
     588:	90 3d       	cpi	r25, 0xD0	; 208
     58a:	39 f0       	breq	.+14     	; 0x59a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE16isChannelMessageENS_8MidiTypeE+0x1a>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 3e       	cpi	r25, 0xE0	; 224
     590:	31 f0       	breq	.+12     	; 0x59e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE16isChannelMessageENS_8MidiTypeE+0x1e>
     592:	90 3c       	cpi	r25, 0xC0	; 192
     594:	21 f0       	breq	.+8      	; 0x59e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE16isChannelMessageENS_8MidiTypeE+0x1e>
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	08 95       	ret
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	08 95       	ret
}
     59e:	08 95       	ret

000005a0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE21getTypeFromStatusByteEh>:
 made public so you can handle MidiTypes more easily.
 */
template<class SerialPort, class Settings>
MidiType MidiInterface<SerialPort, Settings>::getTypeFromStatusByte(byte inStatus)
{
    if ((inStatus  < 0x80) ||
     5a0:	87 ff       	sbrs	r24, 7
     5a2:	0c c0       	rjmp	.+24     	; 0x5bc <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE21getTypeFromStatusByteEh+0x1c>
     5a4:	9c e0       	ldi	r25, 0x0C	; 12
     5a6:	98 0f       	add	r25, r24
     5a8:	92 30       	cpi	r25, 0x02	; 2
     5aa:	40 f0       	brcs	.+16     	; 0x5bc <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE21getTypeFromStatusByteEh+0x1c>
     5ac:	98 2f       	mov	r25, r24
     5ae:	9b 7f       	andi	r25, 0xFB	; 251
     5b0:	99 3f       	cpi	r25, 0xF9	; 249
     5b2:	21 f0       	breq	.+8      	; 0x5bc <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE21getTypeFromStatusByteEh+0x1c>
        (inStatus == 0xfD))
    {
        // Data bytes and undefined.
        return InvalidType;
    }
    if (inStatus < 0xf0)
     5b4:	80 3f       	cpi	r24, 0xF0	; 240
     5b6:	18 f4       	brcc	.+6      	; 0x5be <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE21getTypeFromStatusByteEh+0x1e>
    {
        // Channel message, remove channel nibble.
        return MidiType(inStatus & 0xf0);
     5b8:	80 7f       	andi	r24, 0xF0	; 240
     5ba:	08 95       	ret
        (inStatus == 0xf5) ||
        (inStatus == 0xf9) ||
        (inStatus == 0xfD))
    {
        // Data bytes and undefined.
        return InvalidType;
     5bc:	80 e0       	ldi	r24, 0x00	; 0
        // Channel message, remove channel nibble.
        return MidiType(inStatus & 0xf0);
    }

    return MidiType(inStatus);
}
     5be:	08 95       	ret

000005c0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>:

 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::send(MidiType inType,
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
                                               DataByte inData1,
                                               DataByte inData2,
                                               Channel inChannel)
{
    // Then test if channel is valid
    if (inChannel >= MIDI_CHANNEL_OFF  ||
     5cc:	01 50       	subi	r16, 0x01	; 1
     5ce:	00 31       	cpi	r16, 0x10	; 16
     5d0:	08 f0       	brcs	.+2      	; 0x5d4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x14>
     5d2:	43 c0       	rjmp	.+134    	; 0x65a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x9a>
     5d4:	67 ff       	sbrs	r22, 7
     5d6:	41 c0       	rjmp	.+130    	; 0x65a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x9a>
        inType < 0x80)
    {
        return; // Don't send anything
    }

    if (inType <= PitchBend)  // Channel messages
     5d8:	61 3e       	cpi	r22, 0xE1	; 225
     5da:	a0 f5       	brcc	.+104    	; 0x644 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x84>
     5dc:	d2 2f       	mov	r29, r18
     5de:	14 2f       	mov	r17, r20
     5e0:	c6 2f       	mov	r28, r22
     5e2:	7c 01       	movw	r14, r24
            }
        }
        else
        {
            // Don't care about running status, send the status byte.
            mSerial.write(status);
     5e4:	dc 01       	movw	r26, r24
     5e6:	94 96       	adiw	r26, 0x24	; 36
     5e8:	8d 91       	ld	r24, X+
     5ea:	9c 91       	ld	r25, X
     5ec:	95 97       	sbiw	r26, 0x25	; 37
     5ee:	60 2f       	mov	r22, r16
     5f0:	6c 2b       	or	r22, r28
     5f2:	dc 01       	movw	r26, r24
     5f4:	ed 91       	ld	r30, X+
     5f6:	fc 91       	ld	r31, X
     5f8:	01 90       	ld	r0, Z+
     5fa:	f0 81       	ld	r31, Z
     5fc:	e0 2d       	mov	r30, r0
     5fe:	09 95       	icall
        }

        // Then send data
        mSerial.write(inData1);
     600:	f7 01       	movw	r30, r14
     602:	84 a1       	ldd	r24, Z+36	; 0x24
     604:	95 a1       	ldd	r25, Z+37	; 0x25
     606:	61 2f       	mov	r22, r17
     608:	6f 77       	andi	r22, 0x7F	; 127
     60a:	dc 01       	movw	r26, r24
     60c:	ed 91       	ld	r30, X+
     60e:	fc 91       	ld	r31, X
     610:	01 90       	ld	r0, Z+
     612:	f0 81       	ld	r31, Z
     614:	e0 2d       	mov	r30, r0
     616:	09 95       	icall
        if (inType != ProgramChange && inType != AfterTouchChannel)
     618:	6c 2f       	mov	r22, r28
     61a:	6f 7e       	andi	r22, 0xEF	; 239
     61c:	60 3c       	cpi	r22, 0xC0	; 192
     61e:	e9 f0       	breq	.+58     	; 0x65a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x9a>
        {
            mSerial.write(inData2);
     620:	f7 01       	movw	r30, r14
     622:	84 a1       	ldd	r24, Z+36	; 0x24
     624:	95 a1       	ldd	r25, Z+37	; 0x25
     626:	6d 2f       	mov	r22, r29
     628:	6f 77       	andi	r22, 0x7F	; 127
     62a:	dc 01       	movw	r26, r24
     62c:	ed 91       	ld	r30, X+
     62e:	fc 91       	ld	r31, X
     630:	01 90       	ld	r0, Z+
     632:	f0 81       	ld	r31, Z
     634:	e0 2d       	mov	r30, r0
    }
    else if (inType >= Clock && inType <= SystemReset)
    {
        sendRealTime(inType); // System Real-time and 1 byte.
    }
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14

        // Then send data
        mSerial.write(inData1);
        if (inType != ProgramChange && inType != AfterTouchChannel)
        {
            mSerial.write(inData2);
     642:	09 94       	ijmp
        }
    }
    else if (inType >= Clock && inType <= SystemReset)
     644:	68 3f       	cpi	r22, 0xF8	; 248
     646:	48 f0       	brcs	.+18     	; 0x65a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x9a>
    {
        sendRealTime(inType); // System Real-time and 1 byte.
     648:	84 96       	adiw	r24, 0x24	; 36
    }
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
            mSerial.write(inData2);
        }
    }
    else if (inType >= Clock && inType <= SystemReset)
    {
        sendRealTime(inType); // System Real-time and 1 byte.
     656:	0c 94 b1 00 	jmp	0x162	; 0x162 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE12sendRealTimeENS_8MidiTypeE.isra.8>
    }
}
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	08 95       	ret

00000668 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh>:
// - All system messages (System Exclusive, Common and Real Time) are passed
//   to output unless filter is set to Off.
// - Channel messages are passed to the output whether their channel
//   is matching the input channel and the filter setting
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::thruFilter(Channel inChannel)
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	ec 01       	movw	r28, r24
{
    // If the feature is disabled, don't do anything.
    if (!mThruActivated || (mThruFilterMode == Thru::Off))
     676:	9c a9       	ldd	r25, Y+52	; 0x34
     678:	29 2f       	mov	r18, r25
     67a:	21 70       	andi	r18, 0x01	; 1
     67c:	90 ff       	sbrs	r25, 0
     67e:	bf c0       	rjmp	.+382    	; 0x7fe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x196>
     680:	89 2f       	mov	r24, r25
     682:	8e 7f       	andi	r24, 0xFE	; 254
     684:	09 f4       	brne	.+2      	; 0x688 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x20>
     686:	bb c0       	rjmp	.+374    	; 0x7fe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x196>
     688:	36 2f       	mov	r19, r22
        return;

    // First, check if the received message is Channel
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
     68a:	6e a9       	ldd	r22, Y+54	; 0x36
     68c:	80 e8       	ldi	r24, 0x80	; 128
     68e:	86 0f       	add	r24, r22
     690:	81 36       	cpi	r24, 0x61	; 97
     692:	d8 f4       	brcc	.+54     	; 0x6ca <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x62>
    {
        const bool filter_condition = ((mMessage.channel == inChannel) ||
     694:	0d a9       	ldd	r16, Y+53	; 0x35
                                       (inChannel == MIDI_CHANNEL_OMNI));
     696:	03 17       	cp	r16, r19
     698:	19 f0       	breq	.+6      	; 0x6a0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x38>
     69a:	21 e0       	ldi	r18, 0x01	; 1
     69c:	31 11       	cpse	r19, r1
     69e:	20 e0       	ldi	r18, 0x00	; 0

        // Now let's pass it to the output
        switch (mThruFilterMode)
     6a0:	96 95       	lsr	r25
     6a2:	92 30       	cpi	r25, 0x02	; 2
     6a4:	31 f0       	breq	.+12     	; 0x6b2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x4a>
     6a6:	93 30       	cpi	r25, 0x03	; 3
     6a8:	41 f0       	breq	.+16     	; 0x6ba <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x52>
     6aa:	91 30       	cpi	r25, 0x01	; 1
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x48>
     6ae:	a7 c0       	rjmp	.+334    	; 0x7fe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x196>
     6b0:	06 c0       	rjmp	.+12     	; 0x6be <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x56>
                     mMessage.data2,
                     mMessage.channel);
                break;

            case Thru::SameChannel:
                if (filter_condition)
     6b2:	22 23       	and	r18, r18
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x50>
     6b6:	a3 c0       	rjmp	.+326    	; 0x7fe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x196>
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x56>
                         mMessage.channel);
                }
                break;

            case Thru::DifferentChannel:
                if (!filter_condition)
     6ba:	21 11       	cpse	r18, r1
     6bc:	a0 c0       	rjmp	.+320    	; 0x7fe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x196>
                {
                    send(mMessage.type,
     6be:	28 ad       	ldd	r18, Y+56	; 0x38
     6c0:	4f a9       	ldd	r20, Y+55	; 0x37
     6c2:	ce 01       	movw	r24, r28
     6c4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
     6c8:	9a c0       	rjmp	.+308    	; 0x7fe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x196>
        }
    }
    else
    {
        // Send the message to the output
        switch (mMessage.type)
     6ca:	86 2f       	mov	r24, r22
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	fc 01       	movw	r30, r24
     6d0:	e0 5f       	subi	r30, 0xF0	; 240
     6d2:	f1 09       	sbc	r31, r1
     6d4:	e0 31       	cpi	r30, 0x10	; 16
     6d6:	f1 05       	cpc	r31, r1
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x74>
     6da:	91 c0       	rjmp	.+290    	; 0x7fe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x196>
     6dc:	ec 5c       	subi	r30, 0xCC	; 204
     6de:	ff 4f       	sbci	r31, 0xFF	; 255
     6e0:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__tablejump2__>
            case Stop:
            case Continue:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                sendRealTime(mMessage.type);
     6e4:	ce 01       	movw	r24, r28
     6e6:	84 96       	adiw	r24, 0x24	; 36

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
            case Stop:
            case Continue:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                sendRealTime(mMessage.type);
     6f4:	0c 94 b1 00 	jmp	0x162	; 0x162 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE12sendRealTimeENS_8MidiTypeE.isra.8>
 @see getSysExArrayLength to get the array's length in bytes.
 */
template<class SerialPort, class Settings>
inline const byte* MidiInterface<SerialPort, Settings>::getSysExArray() const
{
    return mMessage.sysexArray;
     6f8:	8e 01       	movw	r16, r28
     6fa:	07 5c       	subi	r16, 0xC7	; 199
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	78 01       	movw	r14, r16
     700:	8f a9       	ldd	r24, Y+55	; 0x37
     702:	98 ad       	ldd	r25, Y+56	; 0x38
     704:	81 38       	cpi	r24, 0x81	; 129
     706:	91 05       	cpc	r25, r1
     708:	10 f0       	brcs	.+4      	; 0x70e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xa6>
     70a:	80 e8       	ldi	r24, 0x80	; 128
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	08 0f       	add	r16, r24
     710:	19 1f       	adc	r17, r25
    if (writeBeginEndBytes)
    {
        mSerial.write(0xf0);
    }

    for (unsigned i = 0; i < inLength; ++i)
     712:	0e 15       	cp	r16, r14
     714:	1f 05       	cpc	r17, r15
     716:	09 f4       	brne	.+2      	; 0x71a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xb2>
     718:	72 c0       	rjmp	.+228    	; 0x7fe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x196>
    {
        mSerial.write(inArray[i]);
     71a:	8c a1       	ldd	r24, Y+36	; 0x24
     71c:	9d a1       	ldd	r25, Y+37	; 0x25
     71e:	d7 01       	movw	r26, r14
     720:	6d 91       	ld	r22, X+
     722:	7d 01       	movw	r14, r26
     724:	dc 01       	movw	r26, r24
     726:	ed 91       	ld	r30, X+
     728:	fc 91       	ld	r31, X
     72a:	01 90       	ld	r0, Z+
     72c:	f0 81       	ld	r31, Z
     72e:	e0 2d       	mov	r30, r0
     730:	09 95       	icall
     732:	ef cf       	rjmp	.-34     	; 0x712 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xaa>
                // Send SysEx (0xf0 and 0xf7 are included in the buffer)
                sendSysEx(getSysExArrayLength(), getSysExArray(), true);
                break;

            case SongSelect:
                sendSongSelect(mMessage.data1);
     734:	1f a9       	ldd	r17, Y+55	; 0x37

/*! \brief Send a Song Select message */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendSongSelect(DataByte inSongNumber)
{
    mSerial.write((byte)SongSelect);
     736:	8c a1       	ldd	r24, Y+36	; 0x24
     738:	9d a1       	ldd	r25, Y+37	; 0x25
     73a:	dc 01       	movw	r26, r24
     73c:	ed 91       	ld	r30, X+
     73e:	fc 91       	ld	r31, X
     740:	01 90       	ld	r0, Z+
     742:	f0 81       	ld	r31, Z
     744:	e0 2d       	mov	r30, r0
     746:	63 ef       	ldi	r22, 0xF3	; 243
     748:	09 95       	icall
    mSerial.write(inSongNumber & 0x7f);
     74a:	1f 77       	andi	r17, 0x7F	; 127
     74c:	61 2f       	mov	r22, r17
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	8c a1       	ldd	r24, Y+36	; 0x24
     752:	9d a1       	ldd	r25, Y+37	; 0x25

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
/*! \brief Send a Song Select message */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendSongSelect(DataByte inSongNumber)
{
    mSerial.write((byte)SongSelect);
    mSerial.write(inSongNumber & 0x7f);
     760:	0c 94 cc 00 	jmp	0x198	; 0x198 <_ZN14HardwareSerial5writeEi>
            case SongSelect:
                sendSongSelect(mMessage.data1);
                break;

            case SongPosition:
                sendSongPosition(mMessage.data1 | ((unsigned)mMessage.data2 << 7));
     764:	08 ad       	ldd	r16, Y+56	; 0x38
     766:	b0 e8       	ldi	r27, 0x80	; 128
     768:	0b 9f       	mul	r16, r27
     76a:	80 01       	movw	r16, r0
     76c:	11 24       	eor	r1, r1
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	08 2b       	or	r16, r24
 \param inBeats    The number of beats since the start of the song.
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendSongPosition(unsigned inBeats)
{
    mSerial.write((byte)SongPosition);
     772:	8c a1       	ldd	r24, Y+36	; 0x24
     774:	9d a1       	ldd	r25, Y+37	; 0x25
     776:	dc 01       	movw	r26, r24
     778:	ed 91       	ld	r30, X+
     77a:	fc 91       	ld	r31, X
     77c:	01 90       	ld	r0, Z+
     77e:	f0 81       	ld	r31, Z
     780:	e0 2d       	mov	r30, r0
     782:	62 ef       	ldi	r22, 0xF2	; 242
     784:	09 95       	icall
    mSerial.write(inBeats & 0x7f);
     786:	b8 01       	movw	r22, r16
     788:	6f 77       	andi	r22, 0x7F	; 127
     78a:	77 27       	eor	r23, r23
     78c:	8c a1       	ldd	r24, Y+36	; 0x24
     78e:	9d a1       	ldd	r25, Y+37	; 0x25
     790:	0e 94 c5 00 	call	0x18a	; 0x18a <_ZN14HardwareSerial5writeEj>
    mSerial.write((inBeats >> 7) & 0x7f);
     794:	b8 01       	movw	r22, r16
     796:	66 0f       	add	r22, r22
     798:	67 2f       	mov	r22, r23
     79a:	66 1f       	adc	r22, r22
     79c:	77 0b       	sbc	r23, r23
     79e:	71 95       	neg	r23
     7a0:	6f 77       	andi	r22, 0x7F	; 127
     7a2:	77 27       	eor	r23, r23
     7a4:	8c a1       	ldd	r24, Y+36	; 0x24
     7a6:	9d a1       	ldd	r25, Y+37	; 0x25

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendSongPosition(unsigned inBeats)
{
    mSerial.write((byte)SongPosition);
    mSerial.write(inBeats & 0x7f);
    mSerial.write((inBeats >> 7) & 0x7f);
     7b4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_ZN14HardwareSerial5writeEj>
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendTimeCodeQuarterFrame(DataByte inTypeNibble,
                                                                   DataByte inValuesNibble)
{
    const byte data = byte((((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f)));
     7b8:	8f a9       	ldd	r24, Y+55	; 0x37
     7ba:	87 70       	andi	r24, 0x07	; 7
     7bc:	b0 e1       	ldi	r27, 0x10	; 16
     7be:	8b 9f       	mul	r24, r27
     7c0:	c0 01       	movw	r24, r0
     7c2:	11 24       	eor	r1, r1
     7c4:	18 ad       	ldd	r17, Y+56	; 0x38
     7c6:	1f 70       	andi	r17, 0x0F	; 15
     7c8:	18 2b       	or	r17, r24
                you can send the byte here.
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendTimeCodeQuarterFrame(DataByte inData)
{
    mSerial.write((byte)TimeCodeQuarterFrame);
     7ca:	8c a1       	ldd	r24, Y+36	; 0x24
     7cc:	9d a1       	ldd	r25, Y+37	; 0x25
     7ce:	dc 01       	movw	r26, r24
     7d0:	ed 91       	ld	r30, X+
     7d2:	fc 91       	ld	r31, X
     7d4:	01 90       	ld	r0, Z+
     7d6:	f0 81       	ld	r31, Z
     7d8:	e0 2d       	mov	r30, r0
     7da:	61 ef       	ldi	r22, 0xF1	; 241
     7dc:	09 95       	icall
    mSerial.write(inData);
     7de:	8c a1       	ldd	r24, Y+36	; 0x24
     7e0:	9d a1       	ldd	r25, Y+37	; 0x25
     7e2:	dc 01       	movw	r26, r24
     7e4:	ed 91       	ld	r30, X+
     7e6:	fc 91       	ld	r31, X
     7e8:	01 90       	ld	r0, Z+
     7ea:	f0 81       	ld	r31, Z
     7ec:	e0 2d       	mov	r30, r0
     7ee:	61 2f       	mov	r22, r17

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendTimeCodeQuarterFrame(DataByte inData)
{
    mSerial.write((byte)TimeCodeQuarterFrame);
    mSerial.write(inData);
     7fc:	09 94       	ijmp

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	08 95       	ret

0000080c <loop>:
void setupInterrupts() {
  sei();    // Enable global interrupts to be safe, nothing else to do here
}

// Main program loop polls for MIDI events
void loop() {
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
 @see see setInputChannel()
 */
template<class SerialPort, class Settings>
inline bool MidiInterface<SerialPort, Settings>::read()
{
    return read(mInputChannel);
     816:	10 91 3c 01 	lds	r17, 0x013C	; 0x80013c <MIDI+0x26>
/*! \brief Read messages on a specified channel.
 */
template<class SerialPort, class Settings>
inline bool MidiInterface<SerialPort, Settings>::read(Channel inChannel)
{
    if (inChannel >= MIDI_CHANNEL_OFF)
     81a:	11 31       	cpi	r17, 0x11	; 17
     81c:	08 f0       	brcs	.+2      	; 0x820 <loop+0x14>
     81e:	93 c1       	rjmp	.+806    	; 0xb46 <__stack+0x247>

// Private method: MIDI parser
template<class SerialPort, class Settings>
bool MidiInterface<SerialPort, Settings>::parse()
{
    if (mSerial.available() == 0)
     820:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <MIDI+0x24>
     824:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <MIDI+0x25>
     828:	dc 01       	movw	r26, r24
     82a:	ed 91       	ld	r30, X+
     82c:	fc 91       	ld	r31, X
     82e:	00 84       	ldd	r0, Z+8	; 0x08
     830:	f1 85       	ldd	r31, Z+9	; 0x09
     832:	e0 2d       	mov	r30, r0
     834:	09 95       	icall
     836:	89 2b       	or	r24, r25
     838:	09 f4       	brne	.+2      	; 0x83c <loop+0x30>
     83a:	85 c1       	rjmp	.+778    	; 0xb46 <__stack+0x247>
    //  - Look for other bytes in buffer, call parser recursively,
    //    until the message is assembled or the buffer is empty.
    // Else, add the extracted byte to the pending message, and check validity.
    // When the message is done, store it.

    const byte extracted = mSerial.read();
     83c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <MIDI+0x24>
     840:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <MIDI+0x25>
     844:	dc 01       	movw	r26, r24
     846:	ed 91       	ld	r30, X+
     848:	fc 91       	ld	r31, X
     84a:	02 84       	ldd	r0, Z+10	; 0x0a
     84c:	f3 85       	ldd	r31, Z+11	; 0x0b
     84e:	e0 2d       	mov	r30, r0
     850:	09 95       	icall
     852:	ec 01       	movw	r28, r24

    // Ignore Undefined
    if (extracted == 0xf9 || extracted == 0xfd)
     854:	8b 7f       	andi	r24, 0xFB	; 251
     856:	89 3f       	cpi	r24, 0xF9	; 249
     858:	09 f4       	brne	.+2      	; 0x85c <loop+0x50>
     85a:	75 c1       	rjmp	.+746    	; 0xb46 <__stack+0x247>
        {
            return parse();
        }
    }

    if (mPendingMessageIndex == 0)
     85c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <MIDI+0x2e>
     860:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <MIDI+0x2f>
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	09 f0       	breq	.+2      	; 0x86a <loop+0x5e>
     868:	9b c0       	rjmp	.+310    	; 0x9a0 <__stack+0xa1>
    {
        // Start a new pending message
        mPendingMessage[0] = extracted;
     86a:	c0 93 3f 01 	sts	0x013F, r28	; 0x80013f <MIDI+0x29>

        // Check for running status first
        if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX)))
     86e:	f0 90 3d 01 	lds	r15, 0x013D	; 0x80013d <MIDI+0x27>
     872:	8f 2d       	mov	r24, r15
     874:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE21getTypeFromStatusByteEh>
     878:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE16isChannelMessageENS_8MidiTypeE>
     87c:	88 23       	and	r24, r24
     87e:	61 f0       	breq	.+24     	; 0x898 <loop+0x8c>
        {
            // Only these types allow Running Status

            // If the status byte is not received, prepend it
            // to the pending message
            if (extracted < 0x80)
     880:	c7 fd       	sbrc	r28, 7
     882:	0a c0       	rjmp	.+20     	; 0x898 <loop+0x8c>
            {
                mPendingMessage[0]   = mRunningStatus_RX;
     884:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <MIDI+0x29>
                mPendingMessage[1]   = extracted;
     888:	c0 93 40 01 	sts	0x0140, r28	; 0x800140 <MIDI+0x2a>
                mPendingMessageIndex = 1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <MIDI+0x2f>
     894:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <MIDI+0x2e>
            // Else: well, we received another status byte,
            // so the running status does not apply here.
            // It will be updated upon completion of this message.
        }

        switch (getTypeFromStatusByte(mPendingMessage[0]))
     898:	c0 91 3f 01 	lds	r28, 0x013F	; 0x80013f <MIDI+0x29>
     89c:	8c 2f       	mov	r24, r28
     89e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE21getTypeFromStatusByteEh>
     8a2:	81 3f       	cpi	r24, 0xF1	; 241
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <loop+0x9c>
     8a6:	4a c0       	rjmp	.+148    	; 0x93c <__stack+0x3d>
     8a8:	20 f5       	brcc	.+72     	; 0x8f2 <loop+0xe6>
     8aa:	80 3b       	cpi	r24, 0xB0	; 176
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <loop+0xa4>
     8ae:	49 c0       	rjmp	.+146    	; 0x942 <__stack+0x43>
     8b0:	50 f4       	brcc	.+20     	; 0x8c6 <loop+0xba>
     8b2:	80 39       	cpi	r24, 0x90	; 144
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <loop+0xac>
     8b6:	45 c0       	rjmp	.+138    	; 0x942 <__stack+0x43>
     8b8:	80 3a       	cpi	r24, 0xA0	; 160
     8ba:	09 f4       	brne	.+2      	; 0x8be <loop+0xb2>
     8bc:	42 c0       	rjmp	.+132    	; 0x942 <__stack+0x43>
     8be:	80 38       	cpi	r24, 0x80	; 128
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <loop+0xb8>
     8c2:	c7 c0       	rjmp	.+398    	; 0xa52 <__stack+0x153>
     8c4:	3e c0       	rjmp	.+124    	; 0x942 <__stack+0x43>
     8c6:	80 3d       	cpi	r24, 0xD0	; 208
     8c8:	c9 f1       	breq	.+114    	; 0x93c <__stack+0x3d>
     8ca:	18 f4       	brcc	.+6      	; 0x8d2 <loop+0xc6>
     8cc:	80 3c       	cpi	r24, 0xC0	; 192
     8ce:	b1 f1       	breq	.+108    	; 0x93c <__stack+0x3d>
     8d0:	c0 c0       	rjmp	.+384    	; 0xa52 <__stack+0x153>
     8d2:	80 3e       	cpi	r24, 0xE0	; 224
     8d4:	b1 f1       	breq	.+108    	; 0x942 <__stack+0x43>
     8d6:	80 3f       	cpi	r24, 0xF0	; 240
     8d8:	09 f0       	breq	.+2      	; 0x8dc <loop+0xd0>
     8da:	bb c0       	rjmp	.+374    	; 0xa52 <__stack+0x153>
                break;

            case SystemExclusive:
                // The message can be any length
                // between 3 and MidiMessage::sSysExMaxSize bytes
                mPendingMessageExpectedLength = MidiMessage::sSysExMaxSize;
     8dc:	20 e8       	ldi	r18, 0x80	; 128
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <MIDI+0x2d>
     8e4:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <MIDI+0x2c>
                mRunningStatus_RX = InvalidType;
     8e8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <MIDI+0x27>
                mMessage.sysexArray[0] = SystemExclusive;
     8ec:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <MIDI+0x39>
     8f0:	2e c0       	rjmp	.+92     	; 0x94e <__stack+0x4f>
            // Else: well, we received another status byte,
            // so the running status does not apply here.
            // It will be updated upon completion of this message.
        }

        switch (getTypeFromStatusByte(mPendingMessage[0]))
     8f2:	88 3f       	cpi	r24, 0xF8	; 248
     8f4:	79 f0       	breq	.+30     	; 0x914 <__stack+0x15>
     8f6:	30 f4       	brcc	.+12     	; 0x904 <__stack+0x5>
     8f8:	83 3f       	cpi	r24, 0xF3	; 243
     8fa:	01 f1       	breq	.+64     	; 0x93c <__stack+0x3d>
     8fc:	10 f1       	brcs	.+68     	; 0x942 <__stack+0x43>
     8fe:	86 3f       	cpi	r24, 0xF6	; 246
     900:	49 f0       	breq	.+18     	; 0x914 <__stack+0x15>
     902:	a7 c0       	rjmp	.+334    	; 0xa52 <__stack+0x153>
     904:	8a 3f       	cpi	r24, 0xFA	; 250
     906:	08 f4       	brcc	.+2      	; 0x90a <__stack+0xb>
     908:	a4 c0       	rjmp	.+328    	; 0xa52 <__stack+0x153>
     90a:	8d 3f       	cpi	r24, 0xFD	; 253
     90c:	18 f0       	brcs	.+6      	; 0x914 <__stack+0x15>
     90e:	8e 3f       	cpi	r24, 0xFE	; 254
     910:	08 f4       	brcc	.+2      	; 0x914 <__stack+0x15>
     912:	9f c0       	rjmp	.+318    	; 0xa52 <__stack+0x153>
            case Clock:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                // Handle the message type directly here.
                mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
     914:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <MIDI+0x36>
                mMessage.channel = 0;
     918:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <MIDI+0x35>
                mMessage.data1   = 0;
     91c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <MIDI+0x37>
                mMessage.data2   = 0;
     920:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <MIDI+0x38>
                mMessage.valid   = true;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <MIDI+0xb9>

                // Do not reset all input attributes, Running Status must remain unchanged.
                // We still need to reset these
                mPendingMessageIndex = 0;
     92a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <MIDI+0x2f>
     92e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <MIDI+0x2e>
                mPendingMessageExpectedLength = 0;
     932:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <MIDI+0x2d>
     936:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <MIDI+0x2c>
     93a:	df c0       	rjmp	.+446    	; 0xafa <__stack+0x1fb>
                // 2 bytes messages
            case ProgramChange:
            case AfterTouchChannel:
            case TimeCodeQuarterFrame:
            case SongSelect:
                mPendingMessageExpectedLength = 2;
     93c:	22 e0       	ldi	r18, 0x02	; 2
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	02 c0       	rjmp	.+4      	; 0x946 <__stack+0x47>
            case NoteOff:
            case ControlChange:
            case PitchBend:
            case AfterTouchPoly:
            case SongPosition:
                mPendingMessageExpectedLength = 3;
     942:	23 e0       	ldi	r18, 0x03	; 3
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <MIDI+0x2d>
     94a:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <MIDI+0x2c>
                resetInput();
                return false;
                break;
        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
     94e:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <MIDI+0x2e>
     952:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <MIDI+0x2f>
     956:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <MIDI+0x2c>
     95a:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <MIDI+0x2d>
     95e:	41 50       	subi	r20, 0x01	; 1
     960:	51 09       	sbc	r21, r1
     962:	24 17       	cp	r18, r20
     964:	35 07       	cpc	r19, r21
     966:	a8 f0       	brcs	.+42     	; 0x992 <__stack+0x93>
        {
            // Reception complete
            mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
     968:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <MIDI+0x36>
            mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
     96c:	cf 70       	andi	r28, 0x0F	; 15
     96e:	cf 5f       	subi	r28, 0xFF	; 255
     970:	c0 93 4b 01 	sts	0x014B, r28	; 0x80014b <MIDI+0x35>
            mMessage.data1   = mPendingMessage[1];
     974:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <MIDI+0x2a>
     978:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <MIDI+0x37>
            mMessage.data2   = 0; // Completed new message has 1 data byte
     97c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <MIDI+0x38>

            mPendingMessageIndex = 0;
     980:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <MIDI+0x2f>
     984:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <MIDI+0x2e>
            mPendingMessageExpectedLength = 0;
     988:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <MIDI+0x2d>
     98c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <MIDI+0x2c>
     990:	25 c0       	rjmp	.+74     	; 0x9dc <__stack+0xdd>
            return true;
        }
        else
        {
            // Waiting for more data
            mPendingMessageIndex++;
     992:	2f 5f       	subi	r18, 0xFF	; 255
     994:	3f 4f       	sbci	r19, 0xFF	; 255
     996:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <MIDI+0x2f>
     99a:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <MIDI+0x2e>
     99e:	d3 c0       	rjmp	.+422    	; 0xb46 <__stack+0x247>
        }
    }
    else
    {
        // First, test if this is a status byte
        if (extracted >= 0x80)
     9a0:	c7 ff       	sbrs	r28, 7
     9a2:	40 c0       	rjmp	.+128    	; 0xa24 <__stack+0x125>
        {
            // Reception of status bytes in the middle of an uncompleted message
            // are allowed only for interleaved Real Time message or EOX
            switch (extracted)
     9a4:	9e 01       	movw	r18, r28
     9a6:	33 27       	eor	r19, r19
     9a8:	2d 3f       	cpi	r18, 0xFD	; 253
     9aa:	31 05       	cpc	r19, r1
     9ac:	54 f4       	brge	.+20     	; 0x9c2 <__stack+0xc3>
     9ae:	2a 3f       	cpi	r18, 0xFA	; 250
     9b0:	31 05       	cpc	r19, r1
     9b2:	64 f4       	brge	.+24     	; 0x9cc <__stack+0xcd>
     9b4:	27 3f       	cpi	r18, 0xF7	; 247
     9b6:	31 05       	cpc	r19, r1
     9b8:	a9 f0       	breq	.+42     	; 0x9e4 <__stack+0xe5>
     9ba:	28 3f       	cpi	r18, 0xF8	; 248
     9bc:	31 05       	cpc	r19, r1
     9be:	91 f5       	brne	.+100    	; 0xa24 <__stack+0x125>
     9c0:	05 c0       	rjmp	.+10     	; 0x9cc <__stack+0xcd>
     9c2:	2e 5f       	subi	r18, 0xFE	; 254
     9c4:	31 09       	sbc	r19, r1
     9c6:	22 30       	cpi	r18, 0x02	; 2
     9c8:	31 05       	cpc	r19, r1
     9ca:	60 f5       	brcc	.+88     	; 0xa24 <__stack+0x125>
                    // the MIDI class, and recompose the message it was
                    // interleaved into. Oh, and without killing the running status..
                    // This is done by leaving the pending message as is,
                    // it will be completed on next calls.

                    mMessage.type    = (MidiType)extracted;
     9cc:	c0 93 4c 01 	sts	0x014C, r28	; 0x80014c <MIDI+0x36>
                    mMessage.data1   = 0;
     9d0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <MIDI+0x37>
                    mMessage.data2   = 0;
     9d4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <MIDI+0x38>
                    mMessage.channel = 0;
     9d8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <MIDI+0x35>
                    mMessage.valid   = true;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <MIDI+0xb9>
     9e2:	8b c0       	rjmp	.+278    	; 0xafa <__stack+0x1fb>
                    return true;

                    // End of Exclusive
                case 0xf7:
                    if (mMessage.sysexArray[0] == SystemExclusive)
     9e4:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <MIDI+0x39>
     9e8:	40 3f       	cpi	r20, 0xF0	; 240
     9ea:	99 f5       	brne	.+102    	; 0xa52 <__stack+0x153>
                    {
                        // Store the last byte (EOX)
                        mMessage.sysexArray[mPendingMessageIndex++] = 0xf7;
     9ec:	9c 01       	movw	r18, r24
     9ee:	2f 5f       	subi	r18, 0xFF	; 255
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	fc 01       	movw	r30, r24
     9f4:	ea 5e       	subi	r30, 0xEA	; 234
     9f6:	fe 4f       	sbci	r31, 0xFE	; 254
     9f8:	57 ef       	ldi	r21, 0xF7	; 247
     9fa:	51 af       	std	Z+57, r21	; 0x39
                        mMessage.type = SystemExclusive;
     9fc:	40 93 4c 01 	sts	0x014C, r20	; 0x80014c <MIDI+0x36>

                        // Get length
                        mMessage.data1   = mPendingMessageIndex & 0xff; // LSB
     a00:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <MIDI+0x37>
                        mMessage.data2   = byte(mPendingMessageIndex >> 8);   // MSB
     a04:	30 93 4e 01 	sts	0x014E, r19	; 0x80014e <MIDI+0x38>
                        mMessage.channel = 0;
     a08:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <MIDI+0x35>
                        mMessage.valid   = true;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <MIDI+0xb9>

// Private method: reset input attributes
template<class SerialPort, class Settings>
inline void MidiInterface<SerialPort, Settings>::resetInput()
{
    mPendingMessageIndex = 0;
     a12:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <MIDI+0x2f>
     a16:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <MIDI+0x2e>
    mPendingMessageExpectedLength = 0;
     a1a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <MIDI+0x2d>
     a1e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <MIDI+0x2c>
     a22:	62 c0       	rjmp	.+196    	; 0xae8 <__stack+0x1e9>
                    break; // LCOV_EXCL_LINE - Coverage blind spot
            }
        }

        // Add extracted data byte to pending message
        if (mPendingMessage[0] == SystemExclusive)
     a24:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <MIDI+0x29>
     a28:	fc 01       	movw	r30, r24
     a2a:	ea 5e       	subi	r30, 0xEA	; 234
     a2c:	fe 4f       	sbci	r31, 0xFE	; 254
     a2e:	20 3f       	cpi	r18, 0xF0	; 240
     a30:	d9 f4       	brne	.+54     	; 0xa68 <__stack+0x169>
            mMessage.sysexArray[mPendingMessageIndex] = extracted;
     a32:	c1 af       	std	Z+57, r28	; 0x39
        else
            mPendingMessage[mPendingMessageIndex] = extracted;

        // Now we are going to check if we have reached the end of the message
        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
     a34:	e0 90 42 01 	lds	r14, 0x0142	; 0x800142 <MIDI+0x2c>
     a38:	f0 90 43 01 	lds	r15, 0x0143	; 0x800143 <MIDI+0x2d>
     a3c:	97 01       	movw	r18, r14
     a3e:	21 50       	subi	r18, 0x01	; 1
     a40:	31 09       	sbc	r19, r1
     a42:	82 17       	cp	r24, r18
     a44:	93 07       	cpc	r25, r19
     a46:	08 f4       	brcc	.+2      	; 0xa4a <__stack+0x14b>
     a48:	52 c0       	rjmp	.+164    	; 0xaee <__stack+0x1ef>
        {
            // "FML" case: fall down here with an overflown SysEx..
            // This means we received the last possible data byte that can fit
            // the buffer. If this happens, try increasing MidiMessage::sSysExMaxSize.
            if (mPendingMessage[0] == SystemExclusive)
     a4a:	d0 91 3f 01 	lds	r29, 0x013F	; 0x80013f <MIDI+0x29>
     a4e:	d0 3f       	cpi	r29, 0xF0	; 240
     a50:	69 f4       	brne	.+26     	; 0xa6c <__stack+0x16d>

// Private method: reset input attributes
template<class SerialPort, class Settings>
inline void MidiInterface<SerialPort, Settings>::resetInput()
{
    mPendingMessageIndex = 0;
     a52:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <MIDI+0x2f>
     a56:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <MIDI+0x2e>
    mPendingMessageExpectedLength = 0;
     a5a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <MIDI+0x2d>
     a5e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <MIDI+0x2c>
    mRunningStatus_RX = InvalidType;
     a62:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <MIDI+0x27>
     a66:	6f c0       	rjmp	.+222    	; 0xb46 <__stack+0x247>

        // Add extracted data byte to pending message
        if (mPendingMessage[0] == SystemExclusive)
            mMessage.sysexArray[mPendingMessageIndex] = extracted;
        else
            mPendingMessage[mPendingMessageIndex] = extracted;
     a68:	c1 a7       	std	Z+41, r28	; 0x29
     a6a:	e4 cf       	rjmp	.-56     	; 0xa34 <__stack+0x135>
            {
                resetInput();
                return false;
            }

            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
     a6c:	8d 2f       	mov	r24, r29
     a6e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE21getTypeFromStatusByteEh>
     a72:	c8 2f       	mov	r28, r24
     a74:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <MIDI+0x36>

            if (isChannelMessage(mMessage.type))
     a78:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE16isChannelMessageENS_8MidiTypeE>
     a7c:	88 23       	and	r24, r24
     a7e:	31 f0       	breq	.+12     	; 0xa8c <__stack+0x18d>
                mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
     a80:	8d 2f       	mov	r24, r29
     a82:	8f 70       	andi	r24, 0x0F	; 15
     a84:	8f 5f       	subi	r24, 0xFF	; 255
     a86:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <MIDI+0x35>
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <__stack+0x191>
            else
                mMessage.channel = 0;
     a8c:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <MIDI+0x35>

            mMessage.data1 = mPendingMessage[1];
     a90:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <MIDI+0x2a>
     a94:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <MIDI+0x37>

            // Save data2 only if applicable
            mMessage.data2 = mPendingMessageExpectedLength == 3 ? mPendingMessage[2] : 0;
     a98:	b3 e0       	ldi	r27, 0x03	; 3
     a9a:	eb 16       	cp	r14, r27
     a9c:	f1 04       	cpc	r15, r1
     a9e:	19 f4       	brne	.+6      	; 0xaa6 <__stack+0x1a7>
     aa0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <MIDI+0x2b>
     aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <__stack+0x1a9>
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <MIDI+0x38>

            // Reset local variables
            mPendingMessageIndex = 0;
     aac:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <MIDI+0x2f>
     ab0:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <MIDI+0x2e>
            mPendingMessageExpectedLength = 0;
     ab4:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <MIDI+0x2d>
     ab8:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <MIDI+0x2c>

            mMessage.valid = true;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <MIDI+0xb9>

            // Activate running status (if enabled for the received type)
            switch (mMessage.type)
     ac2:	c0 3b       	cpi	r28, 0xB0	; 176
     ac4:	71 f0       	breq	.+28     	; 0xae2 <__stack+0x1e3>
     ac6:	38 f4       	brcc	.+14     	; 0xad6 <__stack+0x1d7>
     ac8:	c0 39       	cpi	r28, 0x90	; 144
     aca:	59 f0       	breq	.+22     	; 0xae2 <__stack+0x1e3>
     acc:	c0 3a       	cpi	r28, 0xA0	; 160
     ace:	49 f0       	breq	.+18     	; 0xae2 <__stack+0x1e3>
     ad0:	c0 38       	cpi	r28, 0x80	; 128
     ad2:	51 f4       	brne	.+20     	; 0xae8 <__stack+0x1e9>
     ad4:	06 c0       	rjmp	.+12     	; 0xae2 <__stack+0x1e3>
     ad6:	c0 3d       	cpi	r28, 0xD0	; 208
     ad8:	21 f0       	breq	.+8      	; 0xae2 <__stack+0x1e3>
     ada:	c0 3e       	cpi	r28, 0xE0	; 224
     adc:	11 f0       	breq	.+4      	; 0xae2 <__stack+0x1e3>
     ade:	c0 3c       	cpi	r28, 0xC0	; 192
     ae0:	19 f4       	brne	.+6      	; 0xae8 <__stack+0x1e9>
                case ControlChange:
                case ProgramChange:
                case AfterTouchChannel:
                case PitchBend:
                    // Running status enabled: store it from received message
                    mRunningStatus_RX = mPendingMessage[0];
     ae2:	d0 93 3d 01 	sts	0x013D, r29	; 0x80013d <MIDI+0x27>
     ae6:	09 c0       	rjmp	.+18     	; 0xafa <__stack+0x1fb>
                    break;

                default:
                    // No running status
                    mRunningStatus_RX = InvalidType;
     ae8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <MIDI+0x27>
     aec:	06 c0       	rjmp	.+12     	; 0xafa <__stack+0x1fb>
            return true;
        }
        else
        {
            // Then update the index of the pending message.
            mPendingMessageIndex++;
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <MIDI+0x2f>
     af4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <MIDI+0x2e>
     af8:	26 c0       	rjmp	.+76     	; 0xb46 <__stack+0x247>

// Private method, see midi_Settings.h for documentation
template<class SerialPort, class Settings>
inline void MidiInterface<SerialPort, Settings>::handleNullVelocityNoteOnAsNoteOff()
{
    if (Settings::HandleNullVelocityNoteOnAsNoteOff &&
     afa:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <MIDI+0x36>
     afe:	80 39       	cpi	r24, 0x90	; 144
     b00:	21 f4       	brne	.+8      	; 0xb0a <__stack+0x20b>
     b02:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <MIDI+0x38>
     b06:	88 23       	and	r24, r24
     b08:	a9 f0       	breq	.+42     	; 0xb34 <__stack+0x235>
{
    // This method handles recognition of channel
    // (to know if the message is destinated to the Arduino)

    // First, check if the received message is Channel
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
     b0a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <MIDI+0x36>
     b0e:	80 58       	subi	r24, 0x80	; 128
     b10:	81 36       	cpi	r24, 0x61	; 97
     b12:	a0 f4       	brcc	.+40     	; 0xb3c <__stack+0x23d>
    {
        // Then we need to know if we listen to it
        if ((mMessage.channel == inChannel) ||
     b14:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <MIDI+0x35>
     b18:	18 17       	cp	r17, r24
     b1a:	81 f0       	breq	.+32     	; 0xb3c <__stack+0x23d>
     b1c:	11 23       	and	r17, r17
     b1e:	71 f0       	breq	.+28     	; 0xb3c <__stack+0x23d>
    if (channelMatch)
    {
        launchCallback();
    }

    thruFilter(inChannel);
     b20:	61 2f       	mov	r22, r17
     b22:	86 e1       	ldi	r24, 0x16	; 22
     b24:	91 e0       	ldi	r25, 0x01	; 1
  MIDI.read();
}
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	0c 94 34 03 	jmp	0x668	; 0x668 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh>
inline void MidiInterface<SerialPort, Settings>::handleNullVelocityNoteOnAsNoteOff()
{
    if (Settings::HandleNullVelocityNoteOnAsNoteOff &&
        getType() == NoteOn && getData2() == 0)
    {
        mMessage.type = NoteOff;
     b34:	80 e8       	ldi	r24, 0x80	; 128
     b36:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <MIDI+0x36>
     b3a:	e7 cf       	rjmp	.-50     	; 0xb0a <__stack+0x20b>
    handleNullVelocityNoteOnAsNoteOff();
    const bool channelMatch = inputFilter(inChannel);

    if (channelMatch)
    {
        launchCallback();
     b3c:	86 e1       	ldi	r24, 0x16	; 22
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv>
     b44:	ed cf       	rjmp	.-38     	; 0xb20 <__stack+0x221>
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	08 95       	ret

00000b52 <_GLOBAL__sub_I_MIDI>:
// Timer1 Compare Interrupt - signals when it's time to start a bang
ISR (TIMER1_COMPA_vect) {
  PORTD |= (1 << 2);           // Set the optical transmit pin high
  delayMicroseconds(on_time);  // Wait
  PORTD &= ~(1 << 2);          // Set the optical transmit pin low
}
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
    , mPendingMessageExpectedLength(0)
    , mPendingMessageIndex(0)
    , mCurrentRpnNumber(0xffff)
    , mCurrentNrpnNumber(0xffff)
    , mThruActivated(true)
    , mThruFilterMode(Thru::Full)
     b56:	e6 e1       	ldi	r30, 0x16	; 22
     b58:	f1 e0       	ldi	r31, 0x01	; 1
     b5a:	80 ed       	ldi	r24, 0xD0	; 208
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	95 a3       	std	Z+37, r25	; 0x25
     b60:	84 a3       	std	Z+36, r24	; 0x24
     b62:	16 a2       	std	Z+38, r1	; 0x26
     b64:	17 a2       	std	Z+39, r1	; 0x27
     b66:	10 a6       	std	Z+40, r1	; 0x28
     b68:	15 a6       	std	Z+45, r1	; 0x2d
     b6a:	14 a6       	std	Z+44, r1	; 0x2c
     b6c:	17 a6       	std	Z+47, r1	; 0x2f
     b6e:	16 a6       	std	Z+46, r1	; 0x2e
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	9f ef       	ldi	r25, 0xFF	; 255
     b74:	91 ab       	std	Z+49, r25	; 0x31
     b76:	80 ab       	std	Z+48, r24	; 0x30
     b78:	93 ab       	std	Z+51, r25	; 0x33
     b7a:	82 ab       	std	Z+50, r24	; 0x32
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <MIDI+0x34>
    inline Message()
        : channel(0)
        , type(midi::InvalidType)
        , data1(0)
        , data2(0)
        , valid(false)
     b82:	15 aa       	std	Z+53, r1	; 0x35
     b84:	16 aa       	std	Z+54, r1	; 0x36
     b86:	17 aa       	std	Z+55, r1	; 0x37
     b88:	10 ae       	std	Z+56, r1	; 0x38
     b8a:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <MIDI+0xb9>
    {
        memset(sysexArray, 0, sSysExMaxSize * sizeof(DataByte));
     b8e:	80 e8       	ldi	r24, 0x80	; 128
     b90:	af e4       	ldi	r26, 0x4F	; 79
     b92:	b1 e0       	ldi	r27, 0x01	; 1
     b94:	ed 01       	movw	r28, r26
     b96:	19 92       	st	Y+, r1
     b98:	8a 95       	dec	r24
     b9a:	e9 f7       	brne	.-6      	; 0xb96 <_GLOBAL__sub_I_MIDI+0x44>
{
    mNoteOffCallback                = 0;
     b9c:	11 82       	std	Z+1, r1	; 0x01
     b9e:	10 82       	st	Z, r1
    mNoteOnCallback                 = 0;
     ba0:	13 82       	std	Z+3, r1	; 0x03
     ba2:	12 82       	std	Z+2, r1	; 0x02
    mAfterTouchPolyCallback         = 0;
     ba4:	15 82       	std	Z+5, r1	; 0x05
     ba6:	14 82       	std	Z+4, r1	; 0x04
    mControlChangeCallback          = 0;
     ba8:	17 82       	std	Z+7, r1	; 0x07
     baa:	16 82       	std	Z+6, r1	; 0x06
    mProgramChangeCallback          = 0;
     bac:	11 86       	std	Z+9, r1	; 0x09
     bae:	10 86       	std	Z+8, r1	; 0x08
    mAfterTouchChannelCallback      = 0;
     bb0:	13 86       	std	Z+11, r1	; 0x0b
     bb2:	12 86       	std	Z+10, r1	; 0x0a
    mPitchBendCallback              = 0;
     bb4:	15 86       	std	Z+13, r1	; 0x0d
     bb6:	14 86       	std	Z+12, r1	; 0x0c
    mSystemExclusiveCallback        = 0;
     bb8:	17 86       	std	Z+15, r1	; 0x0f
     bba:	16 86       	std	Z+14, r1	; 0x0e
    mTimeCodeQuarterFrameCallback   = 0;
     bbc:	11 8a       	std	Z+17, r1	; 0x11
     bbe:	10 8a       	std	Z+16, r1	; 0x10
    mSongPositionCallback           = 0;
     bc0:	13 8a       	std	Z+19, r1	; 0x13
     bc2:	12 8a       	std	Z+18, r1	; 0x12
    mSongSelectCallback             = 0;
     bc4:	15 8a       	std	Z+21, r1	; 0x15
     bc6:	14 8a       	std	Z+20, r1	; 0x14
    mTuneRequestCallback            = 0;
     bc8:	17 8a       	std	Z+23, r1	; 0x17
     bca:	16 8a       	std	Z+22, r1	; 0x16
    mClockCallback                  = 0;
     bcc:	11 8e       	std	Z+25, r1	; 0x19
     bce:	10 8e       	std	Z+24, r1	; 0x18
    mStartCallback                  = 0;
     bd0:	13 8e       	std	Z+27, r1	; 0x1b
     bd2:	12 8e       	std	Z+26, r1	; 0x1a
    mContinueCallback               = 0;
     bd4:	15 8e       	std	Z+29, r1	; 0x1d
     bd6:	14 8e       	std	Z+28, r1	; 0x1c
    mStopCallback                   = 0;
     bd8:	17 8e       	std	Z+31, r1	; 0x1f
     bda:	16 8e       	std	Z+30, r1	; 0x1e
    mActiveSensingCallback          = 0;
     bdc:	11 a2       	std	Z+33, r1	; 0x21
     bde:	10 a2       	std	Z+32, r1	; 0x20
    mSystemResetCallback            = 0;
     be0:	13 a2       	std	Z+35, r1	; 0x23
     be2:	12 a2       	std	Z+34, r1	; 0x22
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	08 95       	ret

00000bea <__subsf3>:
     bea:	50 58       	subi	r21, 0x80	; 128

00000bec <__addsf3>:
     bec:	bb 27       	eor	r27, r27
     bee:	aa 27       	eor	r26, r26
     bf0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__addsf3x>
     bf4:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_round>
     bf8:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_pscA>
     bfc:	38 f0       	brcs	.+14     	; 0xc0c <__addsf3+0x20>
     bfe:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscB>
     c02:	20 f0       	brcs	.+8      	; 0xc0c <__addsf3+0x20>
     c04:	39 f4       	brne	.+14     	; 0xc14 <__addsf3+0x28>
     c06:	9f 3f       	cpi	r25, 0xFF	; 255
     c08:	19 f4       	brne	.+6      	; 0xc10 <__addsf3+0x24>
     c0a:	26 f4       	brtc	.+8      	; 0xc14 <__addsf3+0x28>
     c0c:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_nan>
     c10:	0e f4       	brtc	.+2      	; 0xc14 <__addsf3+0x28>
     c12:	e0 95       	com	r30
     c14:	e7 fb       	bst	r30, 7
     c16:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>

00000c1a <__addsf3x>:
     c1a:	e9 2f       	mov	r30, r25
     c1c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fp_split3>
     c20:	58 f3       	brcs	.-42     	; 0xbf8 <__addsf3+0xc>
     c22:	ba 17       	cp	r27, r26
     c24:	62 07       	cpc	r22, r18
     c26:	73 07       	cpc	r23, r19
     c28:	84 07       	cpc	r24, r20
     c2a:	95 07       	cpc	r25, r21
     c2c:	20 f0       	brcs	.+8      	; 0xc36 <__addsf3x+0x1c>
     c2e:	79 f4       	brne	.+30     	; 0xc4e <__addsf3x+0x34>
     c30:	a6 f5       	brtc	.+104    	; 0xc9a <__addsf3x+0x80>
     c32:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_zero>
     c36:	0e f4       	brtc	.+2      	; 0xc3a <__addsf3x+0x20>
     c38:	e0 95       	com	r30
     c3a:	0b 2e       	mov	r0, r27
     c3c:	ba 2f       	mov	r27, r26
     c3e:	a0 2d       	mov	r26, r0
     c40:	0b 01       	movw	r0, r22
     c42:	b9 01       	movw	r22, r18
     c44:	90 01       	movw	r18, r0
     c46:	0c 01       	movw	r0, r24
     c48:	ca 01       	movw	r24, r20
     c4a:	a0 01       	movw	r20, r0
     c4c:	11 24       	eor	r1, r1
     c4e:	ff 27       	eor	r31, r31
     c50:	59 1b       	sub	r21, r25
     c52:	99 f0       	breq	.+38     	; 0xc7a <__addsf3x+0x60>
     c54:	59 3f       	cpi	r21, 0xF9	; 249
     c56:	50 f4       	brcc	.+20     	; 0xc6c <__addsf3x+0x52>
     c58:	50 3e       	cpi	r21, 0xE0	; 224
     c5a:	68 f1       	brcs	.+90     	; 0xcb6 <__addsf3x+0x9c>
     c5c:	1a 16       	cp	r1, r26
     c5e:	f0 40       	sbci	r31, 0x00	; 0
     c60:	a2 2f       	mov	r26, r18
     c62:	23 2f       	mov	r18, r19
     c64:	34 2f       	mov	r19, r20
     c66:	44 27       	eor	r20, r20
     c68:	58 5f       	subi	r21, 0xF8	; 248
     c6a:	f3 cf       	rjmp	.-26     	; 0xc52 <__addsf3x+0x38>
     c6c:	46 95       	lsr	r20
     c6e:	37 95       	ror	r19
     c70:	27 95       	ror	r18
     c72:	a7 95       	ror	r26
     c74:	f0 40       	sbci	r31, 0x00	; 0
     c76:	53 95       	inc	r21
     c78:	c9 f7       	brne	.-14     	; 0xc6c <__addsf3x+0x52>
     c7a:	7e f4       	brtc	.+30     	; 0xc9a <__addsf3x+0x80>
     c7c:	1f 16       	cp	r1, r31
     c7e:	ba 0b       	sbc	r27, r26
     c80:	62 0b       	sbc	r22, r18
     c82:	73 0b       	sbc	r23, r19
     c84:	84 0b       	sbc	r24, r20
     c86:	ba f0       	brmi	.+46     	; 0xcb6 <__addsf3x+0x9c>
     c88:	91 50       	subi	r25, 0x01	; 1
     c8a:	a1 f0       	breq	.+40     	; 0xcb4 <__addsf3x+0x9a>
     c8c:	ff 0f       	add	r31, r31
     c8e:	bb 1f       	adc	r27, r27
     c90:	66 1f       	adc	r22, r22
     c92:	77 1f       	adc	r23, r23
     c94:	88 1f       	adc	r24, r24
     c96:	c2 f7       	brpl	.-16     	; 0xc88 <__addsf3x+0x6e>
     c98:	0e c0       	rjmp	.+28     	; 0xcb6 <__addsf3x+0x9c>
     c9a:	ba 0f       	add	r27, r26
     c9c:	62 1f       	adc	r22, r18
     c9e:	73 1f       	adc	r23, r19
     ca0:	84 1f       	adc	r24, r20
     ca2:	48 f4       	brcc	.+18     	; 0xcb6 <__addsf3x+0x9c>
     ca4:	87 95       	ror	r24
     ca6:	77 95       	ror	r23
     ca8:	67 95       	ror	r22
     caa:	b7 95       	ror	r27
     cac:	f7 95       	ror	r31
     cae:	9e 3f       	cpi	r25, 0xFE	; 254
     cb0:	08 f0       	brcs	.+2      	; 0xcb4 <__addsf3x+0x9a>
     cb2:	b0 cf       	rjmp	.-160    	; 0xc14 <__addsf3+0x28>
     cb4:	93 95       	inc	r25
     cb6:	88 0f       	add	r24, r24
     cb8:	08 f0       	brcs	.+2      	; 0xcbc <__addsf3x+0xa2>
     cba:	99 27       	eor	r25, r25
     cbc:	ee 0f       	add	r30, r30
     cbe:	97 95       	ror	r25
     cc0:	87 95       	ror	r24
     cc2:	08 95       	ret

00000cc4 <__fixsfsi>:
     cc4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fixunssfsi>
     cc8:	68 94       	set
     cca:	b1 11       	cpse	r27, r1
     ccc:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
     cd0:	08 95       	ret

00000cd2 <__fixunssfsi>:
     cd2:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_splitA>
     cd6:	88 f0       	brcs	.+34     	; 0xcfa <__fixunssfsi+0x28>
     cd8:	9f 57       	subi	r25, 0x7F	; 127
     cda:	98 f0       	brcs	.+38     	; 0xd02 <__fixunssfsi+0x30>
     cdc:	b9 2f       	mov	r27, r25
     cde:	99 27       	eor	r25, r25
     ce0:	b7 51       	subi	r27, 0x17	; 23
     ce2:	b0 f0       	brcs	.+44     	; 0xd10 <__fixunssfsi+0x3e>
     ce4:	e1 f0       	breq	.+56     	; 0xd1e <__fixunssfsi+0x4c>
     ce6:	66 0f       	add	r22, r22
     ce8:	77 1f       	adc	r23, r23
     cea:	88 1f       	adc	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	1a f0       	brmi	.+6      	; 0xcf6 <__fixunssfsi+0x24>
     cf0:	ba 95       	dec	r27
     cf2:	c9 f7       	brne	.-14     	; 0xce6 <__fixunssfsi+0x14>
     cf4:	14 c0       	rjmp	.+40     	; 0xd1e <__fixunssfsi+0x4c>
     cf6:	b1 30       	cpi	r27, 0x01	; 1
     cf8:	91 f0       	breq	.+36     	; 0xd1e <__fixunssfsi+0x4c>
     cfa:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_zero>
     cfe:	b1 e0       	ldi	r27, 0x01	; 1
     d00:	08 95       	ret
     d02:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_zero>
     d06:	67 2f       	mov	r22, r23
     d08:	78 2f       	mov	r23, r24
     d0a:	88 27       	eor	r24, r24
     d0c:	b8 5f       	subi	r27, 0xF8	; 248
     d0e:	39 f0       	breq	.+14     	; 0xd1e <__fixunssfsi+0x4c>
     d10:	b9 3f       	cpi	r27, 0xF9	; 249
     d12:	cc f3       	brlt	.-14     	; 0xd06 <__fixunssfsi+0x34>
     d14:	86 95       	lsr	r24
     d16:	77 95       	ror	r23
     d18:	67 95       	ror	r22
     d1a:	b3 95       	inc	r27
     d1c:	d9 f7       	brne	.-10     	; 0xd14 <__fixunssfsi+0x42>
     d1e:	3e f4       	brtc	.+14     	; 0xd2e <__fixunssfsi+0x5c>
     d20:	90 95       	com	r25
     d22:	80 95       	com	r24
     d24:	70 95       	com	r23
     d26:	61 95       	neg	r22
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	8f 4f       	sbci	r24, 0xFF	; 255
     d2c:	9f 4f       	sbci	r25, 0xFF	; 255
     d2e:	08 95       	ret

00000d30 <__floatunsisf>:
     d30:	e8 94       	clt
     d32:	09 c0       	rjmp	.+18     	; 0xd46 <__floatsisf+0x12>

00000d34 <__floatsisf>:
     d34:	97 fb       	bst	r25, 7
     d36:	3e f4       	brtc	.+14     	; 0xd46 <__floatsisf+0x12>
     d38:	90 95       	com	r25
     d3a:	80 95       	com	r24
     d3c:	70 95       	com	r23
     d3e:	61 95       	neg	r22
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	8f 4f       	sbci	r24, 0xFF	; 255
     d44:	9f 4f       	sbci	r25, 0xFF	; 255
     d46:	99 23       	and	r25, r25
     d48:	a9 f0       	breq	.+42     	; 0xd74 <__floatsisf+0x40>
     d4a:	f9 2f       	mov	r31, r25
     d4c:	96 e9       	ldi	r25, 0x96	; 150
     d4e:	bb 27       	eor	r27, r27
     d50:	93 95       	inc	r25
     d52:	f6 95       	lsr	r31
     d54:	87 95       	ror	r24
     d56:	77 95       	ror	r23
     d58:	67 95       	ror	r22
     d5a:	b7 95       	ror	r27
     d5c:	f1 11       	cpse	r31, r1
     d5e:	f8 cf       	rjmp	.-16     	; 0xd50 <__floatsisf+0x1c>
     d60:	fa f4       	brpl	.+62     	; 0xda0 <__floatsisf+0x6c>
     d62:	bb 0f       	add	r27, r27
     d64:	11 f4       	brne	.+4      	; 0xd6a <__floatsisf+0x36>
     d66:	60 ff       	sbrs	r22, 0
     d68:	1b c0       	rjmp	.+54     	; 0xda0 <__floatsisf+0x6c>
     d6a:	6f 5f       	subi	r22, 0xFF	; 255
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	8f 4f       	sbci	r24, 0xFF	; 255
     d70:	9f 4f       	sbci	r25, 0xFF	; 255
     d72:	16 c0       	rjmp	.+44     	; 0xda0 <__floatsisf+0x6c>
     d74:	88 23       	and	r24, r24
     d76:	11 f0       	breq	.+4      	; 0xd7c <__floatsisf+0x48>
     d78:	96 e9       	ldi	r25, 0x96	; 150
     d7a:	11 c0       	rjmp	.+34     	; 0xd9e <__floatsisf+0x6a>
     d7c:	77 23       	and	r23, r23
     d7e:	21 f0       	breq	.+8      	; 0xd88 <__floatsisf+0x54>
     d80:	9e e8       	ldi	r25, 0x8E	; 142
     d82:	87 2f       	mov	r24, r23
     d84:	76 2f       	mov	r23, r22
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <__floatsisf+0x5e>
     d88:	66 23       	and	r22, r22
     d8a:	71 f0       	breq	.+28     	; 0xda8 <__floatsisf+0x74>
     d8c:	96 e8       	ldi	r25, 0x86	; 134
     d8e:	86 2f       	mov	r24, r22
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	2a f0       	brmi	.+10     	; 0xda0 <__floatsisf+0x6c>
     d96:	9a 95       	dec	r25
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	da f7       	brpl	.-10     	; 0xd96 <__floatsisf+0x62>
     da0:	88 0f       	add	r24, r24
     da2:	96 95       	lsr	r25
     da4:	87 95       	ror	r24
     da6:	97 f9       	bld	r25, 7
     da8:	08 95       	ret

00000daa <__fp_inf>:
     daa:	97 f9       	bld	r25, 7
     dac:	9f 67       	ori	r25, 0x7F	; 127
     dae:	80 e8       	ldi	r24, 0x80	; 128
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	08 95       	ret

00000db6 <__fp_nan>:
     db6:	9f ef       	ldi	r25, 0xFF	; 255
     db8:	80 ec       	ldi	r24, 0xC0	; 192
     dba:	08 95       	ret

00000dbc <__fp_pscA>:
     dbc:	00 24       	eor	r0, r0
     dbe:	0a 94       	dec	r0
     dc0:	16 16       	cp	r1, r22
     dc2:	17 06       	cpc	r1, r23
     dc4:	18 06       	cpc	r1, r24
     dc6:	09 06       	cpc	r0, r25
     dc8:	08 95       	ret

00000dca <__fp_pscB>:
     dca:	00 24       	eor	r0, r0
     dcc:	0a 94       	dec	r0
     dce:	12 16       	cp	r1, r18
     dd0:	13 06       	cpc	r1, r19
     dd2:	14 06       	cpc	r1, r20
     dd4:	05 06       	cpc	r0, r21
     dd6:	08 95       	ret

00000dd8 <__fp_round>:
     dd8:	09 2e       	mov	r0, r25
     dda:	03 94       	inc	r0
     ddc:	00 0c       	add	r0, r0
     dde:	11 f4       	brne	.+4      	; 0xde4 <__fp_round+0xc>
     de0:	88 23       	and	r24, r24
     de2:	52 f0       	brmi	.+20     	; 0xdf8 <__fp_round+0x20>
     de4:	bb 0f       	add	r27, r27
     de6:	40 f4       	brcc	.+16     	; 0xdf8 <__fp_round+0x20>
     de8:	bf 2b       	or	r27, r31
     dea:	11 f4       	brne	.+4      	; 0xdf0 <__fp_round+0x18>
     dec:	60 ff       	sbrs	r22, 0
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__fp_round+0x20>
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	8f 4f       	sbci	r24, 0xFF	; 255
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	08 95       	ret

00000dfa <__fp_split3>:
     dfa:	57 fd       	sbrc	r21, 7
     dfc:	90 58       	subi	r25, 0x80	; 128
     dfe:	44 0f       	add	r20, r20
     e00:	55 1f       	adc	r21, r21
     e02:	59 f0       	breq	.+22     	; 0xe1a <__fp_splitA+0x10>
     e04:	5f 3f       	cpi	r21, 0xFF	; 255
     e06:	71 f0       	breq	.+28     	; 0xe24 <__fp_splitA+0x1a>
     e08:	47 95       	ror	r20

00000e0a <__fp_splitA>:
     e0a:	88 0f       	add	r24, r24
     e0c:	97 fb       	bst	r25, 7
     e0e:	99 1f       	adc	r25, r25
     e10:	61 f0       	breq	.+24     	; 0xe2a <__fp_splitA+0x20>
     e12:	9f 3f       	cpi	r25, 0xFF	; 255
     e14:	79 f0       	breq	.+30     	; 0xe34 <__fp_splitA+0x2a>
     e16:	87 95       	ror	r24
     e18:	08 95       	ret
     e1a:	12 16       	cp	r1, r18
     e1c:	13 06       	cpc	r1, r19
     e1e:	14 06       	cpc	r1, r20
     e20:	55 1f       	adc	r21, r21
     e22:	f2 cf       	rjmp	.-28     	; 0xe08 <__fp_split3+0xe>
     e24:	46 95       	lsr	r20
     e26:	f1 df       	rcall	.-30     	; 0xe0a <__fp_splitA>
     e28:	08 c0       	rjmp	.+16     	; 0xe3a <__fp_splitA+0x30>
     e2a:	16 16       	cp	r1, r22
     e2c:	17 06       	cpc	r1, r23
     e2e:	18 06       	cpc	r1, r24
     e30:	99 1f       	adc	r25, r25
     e32:	f1 cf       	rjmp	.-30     	; 0xe16 <__fp_splitA+0xc>
     e34:	86 95       	lsr	r24
     e36:	71 05       	cpc	r23, r1
     e38:	61 05       	cpc	r22, r1
     e3a:	08 94       	sec
     e3c:	08 95       	ret

00000e3e <__fp_zero>:
     e3e:	e8 94       	clt

00000e40 <__fp_szero>:
     e40:	bb 27       	eor	r27, r27
     e42:	66 27       	eor	r22, r22
     e44:	77 27       	eor	r23, r23
     e46:	cb 01       	movw	r24, r22
     e48:	97 f9       	bld	r25, 7
     e4a:	08 95       	ret

00000e4c <__mulsf3>:
     e4c:	0e 94 39 07 	call	0xe72	; 0xe72 <__mulsf3x>
     e50:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_round>
     e54:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_pscA>
     e58:	38 f0       	brcs	.+14     	; 0xe68 <__mulsf3+0x1c>
     e5a:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscB>
     e5e:	20 f0       	brcs	.+8      	; 0xe68 <__mulsf3+0x1c>
     e60:	95 23       	and	r25, r21
     e62:	11 f0       	breq	.+4      	; 0xe68 <__mulsf3+0x1c>
     e64:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
     e68:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_nan>
     e6c:	11 24       	eor	r1, r1
     e6e:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>

00000e72 <__mulsf3x>:
     e72:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fp_split3>
     e76:	70 f3       	brcs	.-36     	; 0xe54 <__mulsf3+0x8>

00000e78 <__mulsf3_pse>:
     e78:	95 9f       	mul	r25, r21
     e7a:	c1 f3       	breq	.-16     	; 0xe6c <__mulsf3+0x20>
     e7c:	95 0f       	add	r25, r21
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	55 1f       	adc	r21, r21
     e82:	62 9f       	mul	r22, r18
     e84:	f0 01       	movw	r30, r0
     e86:	72 9f       	mul	r23, r18
     e88:	bb 27       	eor	r27, r27
     e8a:	f0 0d       	add	r31, r0
     e8c:	b1 1d       	adc	r27, r1
     e8e:	63 9f       	mul	r22, r19
     e90:	aa 27       	eor	r26, r26
     e92:	f0 0d       	add	r31, r0
     e94:	b1 1d       	adc	r27, r1
     e96:	aa 1f       	adc	r26, r26
     e98:	64 9f       	mul	r22, r20
     e9a:	66 27       	eor	r22, r22
     e9c:	b0 0d       	add	r27, r0
     e9e:	a1 1d       	adc	r26, r1
     ea0:	66 1f       	adc	r22, r22
     ea2:	82 9f       	mul	r24, r18
     ea4:	22 27       	eor	r18, r18
     ea6:	b0 0d       	add	r27, r0
     ea8:	a1 1d       	adc	r26, r1
     eaa:	62 1f       	adc	r22, r18
     eac:	73 9f       	mul	r23, r19
     eae:	b0 0d       	add	r27, r0
     eb0:	a1 1d       	adc	r26, r1
     eb2:	62 1f       	adc	r22, r18
     eb4:	83 9f       	mul	r24, r19
     eb6:	a0 0d       	add	r26, r0
     eb8:	61 1d       	adc	r22, r1
     eba:	22 1f       	adc	r18, r18
     ebc:	74 9f       	mul	r23, r20
     ebe:	33 27       	eor	r19, r19
     ec0:	a0 0d       	add	r26, r0
     ec2:	61 1d       	adc	r22, r1
     ec4:	23 1f       	adc	r18, r19
     ec6:	84 9f       	mul	r24, r20
     ec8:	60 0d       	add	r22, r0
     eca:	21 1d       	adc	r18, r1
     ecc:	82 2f       	mov	r24, r18
     ece:	76 2f       	mov	r23, r22
     ed0:	6a 2f       	mov	r22, r26
     ed2:	11 24       	eor	r1, r1
     ed4:	9f 57       	subi	r25, 0x7F	; 127
     ed6:	50 40       	sbci	r21, 0x00	; 0
     ed8:	9a f0       	brmi	.+38     	; 0xf00 <__mulsf3_pse+0x88>
     eda:	f1 f0       	breq	.+60     	; 0xf18 <__mulsf3_pse+0xa0>
     edc:	88 23       	and	r24, r24
     ede:	4a f0       	brmi	.+18     	; 0xef2 <__mulsf3_pse+0x7a>
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	bb 1f       	adc	r27, r27
     ee6:	66 1f       	adc	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	88 1f       	adc	r24, r24
     eec:	91 50       	subi	r25, 0x01	; 1
     eee:	50 40       	sbci	r21, 0x00	; 0
     ef0:	a9 f7       	brne	.-22     	; 0xedc <__mulsf3_pse+0x64>
     ef2:	9e 3f       	cpi	r25, 0xFE	; 254
     ef4:	51 05       	cpc	r21, r1
     ef6:	80 f0       	brcs	.+32     	; 0xf18 <__mulsf3_pse+0xa0>
     ef8:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
     efc:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
     f00:	5f 3f       	cpi	r21, 0xFF	; 255
     f02:	e4 f3       	brlt	.-8      	; 0xefc <__mulsf3_pse+0x84>
     f04:	98 3e       	cpi	r25, 0xE8	; 232
     f06:	d4 f3       	brlt	.-12     	; 0xefc <__mulsf3_pse+0x84>
     f08:	86 95       	lsr	r24
     f0a:	77 95       	ror	r23
     f0c:	67 95       	ror	r22
     f0e:	b7 95       	ror	r27
     f10:	f7 95       	ror	r31
     f12:	e7 95       	ror	r30
     f14:	9f 5f       	subi	r25, 0xFF	; 255
     f16:	c1 f7       	brne	.-16     	; 0xf08 <__mulsf3_pse+0x90>
     f18:	fe 2b       	or	r31, r30
     f1a:	88 0f       	add	r24, r24
     f1c:	91 1d       	adc	r25, r1
     f1e:	96 95       	lsr	r25
     f20:	87 95       	ror	r24
     f22:	97 f9       	bld	r25, 7
     f24:	08 95       	ret

00000f26 <pow>:
     f26:	fa 01       	movw	r30, r20
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	30 96       	adiw	r30, 0x00	; 0
     f2e:	21 05       	cpc	r18, r1
     f30:	31 05       	cpc	r19, r1
     f32:	a1 f1       	breq	.+104    	; 0xf9c <pow+0x76>
     f34:	61 15       	cp	r22, r1
     f36:	71 05       	cpc	r23, r1
     f38:	61 f4       	brne	.+24     	; 0xf52 <pow+0x2c>
     f3a:	80 38       	cpi	r24, 0x80	; 128
     f3c:	bf e3       	ldi	r27, 0x3F	; 63
     f3e:	9b 07       	cpc	r25, r27
     f40:	49 f1       	breq	.+82     	; 0xf94 <pow+0x6e>
     f42:	68 94       	set
     f44:	90 38       	cpi	r25, 0x80	; 128
     f46:	81 05       	cpc	r24, r1
     f48:	61 f0       	breq	.+24     	; 0xf62 <pow+0x3c>
     f4a:	80 38       	cpi	r24, 0x80	; 128
     f4c:	bf ef       	ldi	r27, 0xFF	; 255
     f4e:	9b 07       	cpc	r25, r27
     f50:	41 f0       	breq	.+16     	; 0xf62 <pow+0x3c>
     f52:	99 23       	and	r25, r25
     f54:	4a f5       	brpl	.+82     	; 0xfa8 <pow+0x82>
     f56:	ff 3f       	cpi	r31, 0xFF	; 255
     f58:	e1 05       	cpc	r30, r1
     f5a:	31 05       	cpc	r19, r1
     f5c:	21 05       	cpc	r18, r1
     f5e:	19 f1       	breq	.+70     	; 0xfa6 <pow+0x80>
     f60:	e8 94       	clt
     f62:	08 94       	sec
     f64:	e7 95       	ror	r30
     f66:	d9 01       	movw	r26, r18
     f68:	aa 23       	and	r26, r26
     f6a:	29 f4       	brne	.+10     	; 0xf76 <pow+0x50>
     f6c:	ab 2f       	mov	r26, r27
     f6e:	be 2f       	mov	r27, r30
     f70:	f8 5f       	subi	r31, 0xF8	; 248
     f72:	d0 f3       	brcs	.-12     	; 0xf68 <pow+0x42>
     f74:	10 c0       	rjmp	.+32     	; 0xf96 <pow+0x70>
     f76:	ff 5f       	subi	r31, 0xFF	; 255
     f78:	70 f4       	brcc	.+28     	; 0xf96 <pow+0x70>
     f7a:	a6 95       	lsr	r26
     f7c:	e0 f7       	brcc	.-8      	; 0xf76 <pow+0x50>
     f7e:	f7 39       	cpi	r31, 0x97	; 151
     f80:	50 f0       	brcs	.+20     	; 0xf96 <pow+0x70>
     f82:	19 f0       	breq	.+6      	; 0xf8a <pow+0x64>
     f84:	ff 3a       	cpi	r31, 0xAF	; 175
     f86:	38 f4       	brcc	.+14     	; 0xf96 <pow+0x70>
     f88:	9f 77       	andi	r25, 0x7F	; 127
     f8a:	9f 93       	push	r25
     f8c:	0d d0       	rcall	.+26     	; 0xfa8 <pow+0x82>
     f8e:	0f 90       	pop	r0
     f90:	07 fc       	sbrc	r0, 7
     f92:	90 58       	subi	r25, 0x80	; 128
     f94:	08 95       	ret
     f96:	46 f0       	brts	.+16     	; 0xfa8 <pow+0x82>
     f98:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_nan>
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	80 e8       	ldi	r24, 0x80	; 128
     fa2:	9f e3       	ldi	r25, 0x3F	; 63
     fa4:	08 95       	ret
     fa6:	4f e7       	ldi	r20, 0x7F	; 127
     fa8:	9f 77       	andi	r25, 0x7F	; 127
     faa:	5f 93       	push	r21
     fac:	4f 93       	push	r20
     fae:	3f 93       	push	r19
     fb0:	2f 93       	push	r18
     fb2:	0e 94 8e 08 	call	0x111c	; 0x111c <log>
     fb6:	2f 91       	pop	r18
     fb8:	3f 91       	pop	r19
     fba:	4f 91       	pop	r20
     fbc:	5f 91       	pop	r21
     fbe:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3>
     fc2:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <exp>
     fc6:	29 f4       	brne	.+10     	; 0xfd2 <pow+0xac>
     fc8:	16 f0       	brts	.+4      	; 0xfce <pow+0xa8>
     fca:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
     fce:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_zero>
     fd2:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_nan>

00000fd6 <exp>:
     fd6:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_splitA>
     fda:	a8 f3       	brcs	.-22     	; 0xfc6 <pow+0xa0>
     fdc:	96 38       	cpi	r25, 0x86	; 134
     fde:	a0 f7       	brcc	.-24     	; 0xfc8 <pow+0xa2>
     fe0:	07 f8       	bld	r0, 7
     fe2:	0f 92       	push	r0
     fe4:	e8 94       	clt
     fe6:	2b e3       	ldi	r18, 0x3B	; 59
     fe8:	3a ea       	ldi	r19, 0xAA	; 170
     fea:	48 eb       	ldi	r20, 0xB8	; 184
     fec:	5f e7       	ldi	r21, 0x7F	; 127
     fee:	0e 94 3c 07 	call	0xe78	; 0xe78 <__mulsf3_pse>
     ff2:	0f 92       	push	r0
     ff4:	0f 92       	push	r0
     ff6:	0f 92       	push	r0
     ff8:	4d b7       	in	r20, 0x3d	; 61
     ffa:	5e b7       	in	r21, 0x3e	; 62
     ffc:	0f 92       	push	r0
     ffe:	0e 94 d6 08 	call	0x11ac	; 0x11ac <modf>
    1002:	e8 e8       	ldi	r30, 0x88	; 136
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	0e 94 1d 08 	call	0x103a	; 0x103a <__fp_powser>
    100a:	4f 91       	pop	r20
    100c:	5f 91       	pop	r21
    100e:	ef 91       	pop	r30
    1010:	ff 91       	pop	r31
    1012:	e5 95       	asr	r30
    1014:	ee 1f       	adc	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	49 f0       	breq	.+18     	; 0x102c <exp+0x56>
    101a:	fe 57       	subi	r31, 0x7E	; 126
    101c:	e0 68       	ori	r30, 0x80	; 128
    101e:	44 27       	eor	r20, r20
    1020:	ee 0f       	add	r30, r30
    1022:	44 1f       	adc	r20, r20
    1024:	fa 95       	dec	r31
    1026:	e1 f7       	brne	.-8      	; 0x1020 <exp+0x4a>
    1028:	41 95       	neg	r20
    102a:	55 0b       	sbc	r21, r21
    102c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <ldexp>
    1030:	0f 90       	pop	r0
    1032:	07 fe       	sbrs	r0, 7
    1034:	0c 94 44 08 	jmp	0x1088	; 0x1088 <inverse>
    1038:	08 95       	ret

0000103a <__fp_powser>:
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	1f 93       	push	r17
    1040:	0f 93       	push	r16
    1042:	ff 92       	push	r15
    1044:	ef 92       	push	r14
    1046:	df 92       	push	r13
    1048:	7b 01       	movw	r14, r22
    104a:	8c 01       	movw	r16, r24
    104c:	68 94       	set
    104e:	06 c0       	rjmp	.+12     	; 0x105c <__fp_powser+0x22>
    1050:	da 2e       	mov	r13, r26
    1052:	ef 01       	movw	r28, r30
    1054:	0e 94 39 07 	call	0xe72	; 0xe72 <__mulsf3x>
    1058:	fe 01       	movw	r30, r28
    105a:	e8 94       	clt
    105c:	a5 91       	lpm	r26, Z+
    105e:	25 91       	lpm	r18, Z+
    1060:	35 91       	lpm	r19, Z+
    1062:	45 91       	lpm	r20, Z+
    1064:	55 91       	lpm	r21, Z+
    1066:	a6 f3       	brts	.-24     	; 0x1050 <__fp_powser+0x16>
    1068:	ef 01       	movw	r28, r30
    106a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__addsf3x>
    106e:	fe 01       	movw	r30, r28
    1070:	97 01       	movw	r18, r14
    1072:	a8 01       	movw	r20, r16
    1074:	da 94       	dec	r13
    1076:	69 f7       	brne	.-38     	; 0x1052 <__fp_powser+0x18>
    1078:	df 90       	pop	r13
    107a:	ef 90       	pop	r14
    107c:	ff 90       	pop	r15
    107e:	0f 91       	pop	r16
    1080:	1f 91       	pop	r17
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <inverse>:
    1088:	9b 01       	movw	r18, r22
    108a:	ac 01       	movw	r20, r24
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e8       	ldi	r24, 0x80	; 128
    1092:	9f e3       	ldi	r25, 0x3F	; 63
    1094:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__divsf3>
    1098:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
    109c:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__fp_mpack>

000010a0 <ldexp>:
    10a0:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_splitA>
    10a4:	d8 f3       	brcs	.-10     	; 0x109c <inverse+0x14>
    10a6:	99 23       	and	r25, r25
    10a8:	c9 f3       	breq	.-14     	; 0x109c <inverse+0x14>
    10aa:	94 0f       	add	r25, r20
    10ac:	51 1d       	adc	r21, r1
    10ae:	a3 f3       	brvs	.-24     	; 0x1098 <inverse+0x10>
    10b0:	91 50       	subi	r25, 0x01	; 1
    10b2:	50 40       	sbci	r21, 0x00	; 0
    10b4:	94 f0       	brlt	.+36     	; 0x10da <ldexp+0x3a>
    10b6:	59 f0       	breq	.+22     	; 0x10ce <ldexp+0x2e>
    10b8:	88 23       	and	r24, r24
    10ba:	32 f0       	brmi	.+12     	; 0x10c8 <ldexp+0x28>
    10bc:	66 0f       	add	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	91 50       	subi	r25, 0x01	; 1
    10c4:	50 40       	sbci	r21, 0x00	; 0
    10c6:	c1 f7       	brne	.-16     	; 0x10b8 <ldexp+0x18>
    10c8:	9e 3f       	cpi	r25, 0xFE	; 254
    10ca:	51 05       	cpc	r21, r1
    10cc:	2c f7       	brge	.-54     	; 0x1098 <inverse+0x10>
    10ce:	88 0f       	add	r24, r24
    10d0:	91 1d       	adc	r25, r1
    10d2:	96 95       	lsr	r25
    10d4:	87 95       	ror	r24
    10d6:	97 f9       	bld	r25, 7
    10d8:	08 95       	ret
    10da:	5f 3f       	cpi	r21, 0xFF	; 255
    10dc:	ac f0       	brlt	.+42     	; 0x1108 <ldexp+0x68>
    10de:	98 3e       	cpi	r25, 0xE8	; 232
    10e0:	9c f0       	brlt	.+38     	; 0x1108 <ldexp+0x68>
    10e2:	bb 27       	eor	r27, r27
    10e4:	86 95       	lsr	r24
    10e6:	77 95       	ror	r23
    10e8:	67 95       	ror	r22
    10ea:	b7 95       	ror	r27
    10ec:	08 f4       	brcc	.+2      	; 0x10f0 <ldexp+0x50>
    10ee:	b1 60       	ori	r27, 0x01	; 1
    10f0:	93 95       	inc	r25
    10f2:	c1 f7       	brne	.-16     	; 0x10e4 <ldexp+0x44>
    10f4:	bb 0f       	add	r27, r27
    10f6:	58 f7       	brcc	.-42     	; 0x10ce <ldexp+0x2e>
    10f8:	11 f4       	brne	.+4      	; 0x10fe <ldexp+0x5e>
    10fa:	60 ff       	sbrs	r22, 0
    10fc:	e8 cf       	rjmp	.-48     	; 0x10ce <ldexp+0x2e>
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8f 4f       	sbci	r24, 0xFF	; 255
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	e3 cf       	rjmp	.-58     	; 0x10ce <ldexp+0x2e>
    1108:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
    110c:	16 f0       	brts	.+4      	; 0x1112 <ldexp+0x72>
    110e:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__fp_mpack>
    1112:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_nan>
    1116:	68 94       	set
    1118:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>

0000111c <log>:
    111c:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_splitA>
    1120:	a8 f3       	brcs	.-22     	; 0x110c <ldexp+0x6c>
    1122:	99 23       	and	r25, r25
    1124:	c1 f3       	breq	.-16     	; 0x1116 <ldexp+0x76>
    1126:	ae f3       	brts	.-22     	; 0x1112 <ldexp+0x72>
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	1f 93       	push	r17
    112e:	0f 93       	push	r16
    1130:	ff 92       	push	r15
    1132:	c9 2f       	mov	r28, r25
    1134:	dd 27       	eor	r29, r29
    1136:	88 23       	and	r24, r24
    1138:	2a f0       	brmi	.+10     	; 0x1144 <log+0x28>
    113a:	21 97       	sbiw	r28, 0x01	; 1
    113c:	66 0f       	add	r22, r22
    113e:	77 1f       	adc	r23, r23
    1140:	88 1f       	adc	r24, r24
    1142:	da f7       	brpl	.-10     	; 0x113a <log+0x1e>
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e8       	ldi	r20, 0x80	; 128
    114a:	5f eb       	ldi	r21, 0xBF	; 191
    114c:	9f e3       	ldi	r25, 0x3F	; 63
    114e:	88 39       	cpi	r24, 0x98	; 152
    1150:	20 f0       	brcs	.+8      	; 0x115a <log+0x3e>
    1152:	80 3e       	cpi	r24, 0xE0	; 224
    1154:	38 f0       	brcs	.+14     	; 0x1164 <log+0x48>
    1156:	21 96       	adiw	r28, 0x01	; 1
    1158:	8f 77       	andi	r24, 0x7F	; 127
    115a:	0e 94 f6 05 	call	0xbec	; 0xbec <__addsf3>
    115e:	e0 eb       	ldi	r30, 0xB0	; 176
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	04 c0       	rjmp	.+8      	; 0x116c <log+0x50>
    1164:	0e 94 f6 05 	call	0xbec	; 0xbec <__addsf3>
    1168:	ed ed       	ldi	r30, 0xDD	; 221
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	0e 94 1d 08 	call	0x103a	; 0x103a <__fp_powser>
    1170:	8b 01       	movw	r16, r22
    1172:	be 01       	movw	r22, r28
    1174:	ec 01       	movw	r28, r24
    1176:	fb 2e       	mov	r15, r27
    1178:	6f 57       	subi	r22, 0x7F	; 127
    117a:	71 09       	sbc	r23, r1
    117c:	75 95       	asr	r23
    117e:	77 1f       	adc	r23, r23
    1180:	88 0b       	sbc	r24, r24
    1182:	99 0b       	sbc	r25, r25
    1184:	0e 94 9a 06 	call	0xd34	; 0xd34 <__floatsisf>
    1188:	28 e1       	ldi	r18, 0x18	; 24
    118a:	32 e7       	ldi	r19, 0x72	; 114
    118c:	41 e3       	ldi	r20, 0x31	; 49
    118e:	5f e3       	ldi	r21, 0x3F	; 63
    1190:	0e 94 39 07 	call	0xe72	; 0xe72 <__mulsf3x>
    1194:	af 2d       	mov	r26, r15
    1196:	98 01       	movw	r18, r16
    1198:	ae 01       	movw	r20, r28
    119a:	ff 90       	pop	r15
    119c:	0f 91       	pop	r16
    119e:	1f 91       	pop	r17
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__addsf3x>
    11a8:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_round>

000011ac <modf>:
    11ac:	fa 01       	movw	r30, r20
    11ae:	dc 01       	movw	r26, r24
    11b0:	aa 0f       	add	r26, r26
    11b2:	bb 1f       	adc	r27, r27
    11b4:	9b 01       	movw	r18, r22
    11b6:	ac 01       	movw	r20, r24
    11b8:	bf 57       	subi	r27, 0x7F	; 127
    11ba:	28 f4       	brcc	.+10     	; 0x11c6 <modf+0x1a>
    11bc:	22 27       	eor	r18, r18
    11be:	33 27       	eor	r19, r19
    11c0:	44 27       	eor	r20, r20
    11c2:	50 78       	andi	r21, 0x80	; 128
    11c4:	20 c0       	rjmp	.+64     	; 0x1206 <modf+0x5a>
    11c6:	b7 51       	subi	r27, 0x17	; 23
    11c8:	90 f4       	brcc	.+36     	; 0x11ee <modf+0x42>
    11ca:	ab 2f       	mov	r26, r27
    11cc:	00 24       	eor	r0, r0
    11ce:	46 95       	lsr	r20
    11d0:	37 95       	ror	r19
    11d2:	27 95       	ror	r18
    11d4:	01 1c       	adc	r0, r1
    11d6:	a3 95       	inc	r26
    11d8:	d2 f3       	brmi	.-12     	; 0x11ce <modf+0x22>
    11da:	00 20       	and	r0, r0
    11dc:	71 f0       	breq	.+28     	; 0x11fa <modf+0x4e>
    11de:	22 0f       	add	r18, r18
    11e0:	33 1f       	adc	r19, r19
    11e2:	44 1f       	adc	r20, r20
    11e4:	b3 95       	inc	r27
    11e6:	da f3       	brmi	.-10     	; 0x11de <modf+0x32>
    11e8:	0e d0       	rcall	.+28     	; 0x1206 <modf+0x5a>
    11ea:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__subsf3>
    11ee:	61 30       	cpi	r22, 0x01	; 1
    11f0:	71 05       	cpc	r23, r1
    11f2:	a0 e8       	ldi	r26, 0x80	; 128
    11f4:	8a 07       	cpc	r24, r26
    11f6:	b9 46       	sbci	r27, 0x69	; 105
    11f8:	30 f4       	brcc	.+12     	; 0x1206 <modf+0x5a>
    11fa:	9b 01       	movw	r18, r22
    11fc:	ac 01       	movw	r20, r24
    11fe:	66 27       	eor	r22, r22
    1200:	77 27       	eor	r23, r23
    1202:	88 27       	eor	r24, r24
    1204:	90 78       	andi	r25, 0x80	; 128
    1206:	30 96       	adiw	r30, 0x00	; 0
    1208:	21 f0       	breq	.+8      	; 0x1212 <modf+0x66>
    120a:	20 83       	st	Z, r18
    120c:	31 83       	std	Z+1, r19	; 0x01
    120e:	42 83       	std	Z+2, r20	; 0x02
    1210:	53 83       	std	Z+3, r21	; 0x03
    1212:	08 95       	ret

00001214 <__divsf3>:
    1214:	0e 94 1e 09 	call	0x123c	; 0x123c <__divsf3x>
    1218:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_round>
    121c:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscB>
    1220:	58 f0       	brcs	.+22     	; 0x1238 <__divsf3+0x24>
    1222:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_pscA>
    1226:	40 f0       	brcs	.+16     	; 0x1238 <__divsf3+0x24>
    1228:	29 f4       	brne	.+10     	; 0x1234 <__divsf3+0x20>
    122a:	5f 3f       	cpi	r21, 0xFF	; 255
    122c:	29 f0       	breq	.+10     	; 0x1238 <__divsf3+0x24>
    122e:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
    1232:	51 11       	cpse	r21, r1
    1234:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
    1238:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_nan>

0000123c <__divsf3x>:
    123c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fp_split3>
    1240:	68 f3       	brcs	.-38     	; 0x121c <__divsf3+0x8>

00001242 <__divsf3_pse>:
    1242:	99 23       	and	r25, r25
    1244:	b1 f3       	breq	.-20     	; 0x1232 <__divsf3+0x1e>
    1246:	55 23       	and	r21, r21
    1248:	91 f3       	breq	.-28     	; 0x122e <__divsf3+0x1a>
    124a:	95 1b       	sub	r25, r21
    124c:	55 0b       	sbc	r21, r21
    124e:	bb 27       	eor	r27, r27
    1250:	aa 27       	eor	r26, r26
    1252:	62 17       	cp	r22, r18
    1254:	73 07       	cpc	r23, r19
    1256:	84 07       	cpc	r24, r20
    1258:	38 f0       	brcs	.+14     	; 0x1268 <__divsf3_pse+0x26>
    125a:	9f 5f       	subi	r25, 0xFF	; 255
    125c:	5f 4f       	sbci	r21, 0xFF	; 255
    125e:	22 0f       	add	r18, r18
    1260:	33 1f       	adc	r19, r19
    1262:	44 1f       	adc	r20, r20
    1264:	aa 1f       	adc	r26, r26
    1266:	a9 f3       	breq	.-22     	; 0x1252 <__divsf3_pse+0x10>
    1268:	35 d0       	rcall	.+106    	; 0x12d4 <__divsf3_pse+0x92>
    126a:	0e 2e       	mov	r0, r30
    126c:	3a f0       	brmi	.+14     	; 0x127c <__divsf3_pse+0x3a>
    126e:	e0 e8       	ldi	r30, 0x80	; 128
    1270:	32 d0       	rcall	.+100    	; 0x12d6 <__divsf3_pse+0x94>
    1272:	91 50       	subi	r25, 0x01	; 1
    1274:	50 40       	sbci	r21, 0x00	; 0
    1276:	e6 95       	lsr	r30
    1278:	00 1c       	adc	r0, r0
    127a:	ca f7       	brpl	.-14     	; 0x126e <__divsf3_pse+0x2c>
    127c:	2b d0       	rcall	.+86     	; 0x12d4 <__divsf3_pse+0x92>
    127e:	fe 2f       	mov	r31, r30
    1280:	29 d0       	rcall	.+82     	; 0x12d4 <__divsf3_pse+0x92>
    1282:	66 0f       	add	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	88 1f       	adc	r24, r24
    1288:	bb 1f       	adc	r27, r27
    128a:	26 17       	cp	r18, r22
    128c:	37 07       	cpc	r19, r23
    128e:	48 07       	cpc	r20, r24
    1290:	ab 07       	cpc	r26, r27
    1292:	b0 e8       	ldi	r27, 0x80	; 128
    1294:	09 f0       	breq	.+2      	; 0x1298 <__divsf3_pse+0x56>
    1296:	bb 0b       	sbc	r27, r27
    1298:	80 2d       	mov	r24, r0
    129a:	bf 01       	movw	r22, r30
    129c:	ff 27       	eor	r31, r31
    129e:	93 58       	subi	r25, 0x83	; 131
    12a0:	5f 4f       	sbci	r21, 0xFF	; 255
    12a2:	3a f0       	brmi	.+14     	; 0x12b2 <__divsf3_pse+0x70>
    12a4:	9e 3f       	cpi	r25, 0xFE	; 254
    12a6:	51 05       	cpc	r21, r1
    12a8:	78 f0       	brcs	.+30     	; 0x12c8 <__divsf3_pse+0x86>
    12aa:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
    12ae:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
    12b2:	5f 3f       	cpi	r21, 0xFF	; 255
    12b4:	e4 f3       	brlt	.-8      	; 0x12ae <__divsf3_pse+0x6c>
    12b6:	98 3e       	cpi	r25, 0xE8	; 232
    12b8:	d4 f3       	brlt	.-12     	; 0x12ae <__divsf3_pse+0x6c>
    12ba:	86 95       	lsr	r24
    12bc:	77 95       	ror	r23
    12be:	67 95       	ror	r22
    12c0:	b7 95       	ror	r27
    12c2:	f7 95       	ror	r31
    12c4:	9f 5f       	subi	r25, 0xFF	; 255
    12c6:	c9 f7       	brne	.-14     	; 0x12ba <__divsf3_pse+0x78>
    12c8:	88 0f       	add	r24, r24
    12ca:	91 1d       	adc	r25, r1
    12cc:	96 95       	lsr	r25
    12ce:	87 95       	ror	r24
    12d0:	97 f9       	bld	r25, 7
    12d2:	08 95       	ret
    12d4:	e1 e0       	ldi	r30, 0x01	; 1
    12d6:	66 0f       	add	r22, r22
    12d8:	77 1f       	adc	r23, r23
    12da:	88 1f       	adc	r24, r24
    12dc:	bb 1f       	adc	r27, r27
    12de:	62 17       	cp	r22, r18
    12e0:	73 07       	cpc	r23, r19
    12e2:	84 07       	cpc	r24, r20
    12e4:	ba 07       	cpc	r27, r26
    12e6:	20 f0       	brcs	.+8      	; 0x12f0 <__divsf3_pse+0xae>
    12e8:	62 1b       	sub	r22, r18
    12ea:	73 0b       	sbc	r23, r19
    12ec:	84 0b       	sbc	r24, r20
    12ee:	ba 0b       	sbc	r27, r26
    12f0:	ee 1f       	adc	r30, r30
    12f2:	88 f7       	brcc	.-30     	; 0x12d6 <__divsf3_pse+0x94>
    12f4:	e0 95       	com	r30
    12f6:	08 95       	ret

000012f8 <__fp_mpack>:
    12f8:	9f 3f       	cpi	r25, 0xFF	; 255
    12fa:	31 f0       	breq	.+12     	; 0x1308 <__fp_mpack_finite+0xc>

000012fc <__fp_mpack_finite>:
    12fc:	91 50       	subi	r25, 0x01	; 1
    12fe:	20 f4       	brcc	.+8      	; 0x1308 <__fp_mpack_finite+0xc>
    1300:	87 95       	ror	r24
    1302:	77 95       	ror	r23
    1304:	67 95       	ror	r22
    1306:	b7 95       	ror	r27
    1308:	88 0f       	add	r24, r24
    130a:	91 1d       	adc	r25, r1
    130c:	96 95       	lsr	r25
    130e:	87 95       	ror	r24
    1310:	97 f9       	bld	r25, 7
    1312:	08 95       	ret

00001314 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1314:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1316:	91 8d       	ldd	r25, Z+25	; 0x19
    1318:	22 8d       	ldd	r18, Z+26	; 0x1a
    131a:	89 2f       	mov	r24, r25
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	80 5c       	subi	r24, 0xC0	; 192
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	82 1b       	sub	r24, r18
    1324:	91 09       	sbc	r25, r1
}
    1326:	8f 73       	andi	r24, 0x3F	; 63
    1328:	99 27       	eor	r25, r25
    132a:	08 95       	ret

0000132c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    132c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    132e:	91 8d       	ldd	r25, Z+25	; 0x19
    1330:	82 8d       	ldd	r24, Z+26	; 0x1a
    1332:	98 17       	cp	r25, r24
    1334:	31 f0       	breq	.+12     	; 0x1342 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1336:	82 8d       	ldd	r24, Z+26	; 0x1a
    1338:	e8 0f       	add	r30, r24
    133a:	f1 1d       	adc	r31, r1
    133c:	85 8d       	ldd	r24, Z+29	; 0x1d
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1346:	08 95       	ret

00001348 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1348:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    134a:	91 8d       	ldd	r25, Z+25	; 0x19
    134c:	82 8d       	ldd	r24, Z+26	; 0x1a
    134e:	98 17       	cp	r25, r24
    1350:	61 f0       	breq	.+24     	; 0x136a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1352:	82 8d       	ldd	r24, Z+26	; 0x1a
    1354:	df 01       	movw	r26, r30
    1356:	a8 0f       	add	r26, r24
    1358:	b1 1d       	adc	r27, r1
    135a:	5d 96       	adiw	r26, 0x1d	; 29
    135c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    135e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1360:	9f 5f       	subi	r25, 0xFF	; 255
    1362:	9f 73       	andi	r25, 0x3F	; 63
    1364:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    136e:	08 95       	ret

00001370 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1370:	fc 01       	movw	r30, r24
    1372:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1374:	44 8d       	ldd	r20, Z+28	; 0x1c
    1376:	25 2f       	mov	r18, r21
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	84 2f       	mov	r24, r20
    137c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    137e:	82 1b       	sub	r24, r18
    1380:	93 0b       	sbc	r25, r19
    1382:	54 17       	cp	r21, r20
    1384:	10 f0       	brcs	.+4      	; 0x138a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1386:	cf 96       	adiw	r24, 0x3f	; 63
    1388:	08 95       	ret
  return tail - head - 1;
    138a:	01 97       	sbiw	r24, 0x01	; 1
}
    138c:	08 95       	ret

0000138e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    138e:	83 e2       	ldi	r24, 0x23	; 35
    1390:	9b e0       	ldi	r25, 0x0B	; 11
    1392:	89 2b       	or	r24, r25
    1394:	49 f0       	breq	.+18     	; 0x13a8 <_Z14serialEventRunv+0x1a>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	89 2b       	or	r24, r25
    139c:	29 f0       	breq	.+10     	; 0x13a8 <_Z14serialEventRunv+0x1a>
    139e:	0e 94 23 0b 	call	0x1646	; 0x1646 <_Z17Serial0_availablev>
    13a2:	81 11       	cpse	r24, r1
    13a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    13a8:	08 95       	ret

000013aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    13aa:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    13ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    13ae:	df 01       	movw	r26, r30
    13b0:	a8 0f       	add	r26, r24
    13b2:	b1 1d       	adc	r27, r1
    13b4:	a3 5a       	subi	r26, 0xA3	; 163
    13b6:	bf 4f       	sbci	r27, 0xFF	; 255
    13b8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    13ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	8f 73       	andi	r24, 0x3F	; 63
    13c2:	99 27       	eor	r25, r25
    13c4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    13c6:	a6 89       	ldd	r26, Z+22	; 0x16
    13c8:	b7 89       	ldd	r27, Z+23	; 0x17
    13ca:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    13cc:	a0 89       	ldd	r26, Z+16	; 0x10
    13ce:	b1 89       	ldd	r27, Z+17	; 0x11
    13d0:	8c 91       	ld	r24, X
    13d2:	83 70       	andi	r24, 0x03	; 3
    13d4:	80 64       	ori	r24, 0x40	; 64
    13d6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    13d8:	93 8d       	ldd	r25, Z+27	; 0x1b
    13da:	84 8d       	ldd	r24, Z+28	; 0x1c
    13dc:	98 13       	cpse	r25, r24
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    13e0:	02 88       	ldd	r0, Z+18	; 0x12
    13e2:	f3 89       	ldd	r31, Z+19	; 0x13
    13e4:	e0 2d       	mov	r30, r0
    13e6:	80 81       	ld	r24, Z
    13e8:	8f 7d       	andi	r24, 0xDF	; 223
    13ea:	80 83       	st	Z, r24
    13ec:	08 95       	ret

000013ee <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	ec 01       	movw	r28, r24
  _written = true;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1400:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1402:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1404:	98 13       	cpse	r25, r24
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <_ZN14HardwareSerial5writeEh+0x24>
    1408:	e8 89       	ldd	r30, Y+16	; 0x10
    140a:	f9 89       	ldd	r31, Y+17	; 0x11
    140c:	80 81       	ld	r24, Z
    140e:	85 fd       	sbrc	r24, 5
    1410:	26 c0       	rjmp	.+76     	; 0x145e <_ZN14HardwareSerial5writeEh+0x70>
    1412:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1414:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1416:	10 e0       	ldi	r17, 0x00	; 0
    1418:	0f 5f       	subi	r16, 0xFF	; 255
    141a:	1f 4f       	sbci	r17, 0xFF	; 255
    141c:	0f 73       	andi	r16, 0x3F	; 63
    141e:	11 27       	eor	r17, r17
    1420:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1422:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1424:	e8 12       	cpse	r14, r24
    1426:	0c c0       	rjmp	.+24     	; 0x1440 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	07 fc       	sbrc	r0, 7
    142c:	fa cf       	rjmp	.-12     	; 0x1422 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    142e:	e8 89       	ldd	r30, Y+16	; 0x10
    1430:	f9 89       	ldd	r31, Y+17	; 0x11
    1432:	80 81       	ld	r24, Z
    1434:	85 ff       	sbrs	r24, 5
    1436:	f5 cf       	rjmp	.-22     	; 0x1422 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1438:	ce 01       	movw	r24, r28
    143a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    143e:	f1 cf       	rjmp	.-30     	; 0x1422 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1440:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1442:	fe 01       	movw	r30, r28
    1444:	e8 0f       	add	r30, r24
    1446:	f1 1d       	adc	r31, r1
    1448:	e3 5a       	subi	r30, 0xA3	; 163
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    144e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1450:	f8 94       	cli
    _tx_buffer_head = i;
    1452:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1454:	ea 89       	ldd	r30, Y+18	; 0x12
    1456:	fb 89       	ldd	r31, Y+19	; 0x13
    1458:	80 81       	ld	r24, Z
    145a:	80 62       	ori	r24, 0x20	; 32
    145c:	0a c0       	rjmp	.+20     	; 0x1472 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    145e:	9f b7       	in	r25, 0x3f	; 63
    1460:	f8 94       	cli
      *_udr = c;
    1462:	ee 89       	ldd	r30, Y+22	; 0x16
    1464:	ff 89       	ldd	r31, Y+23	; 0x17
    1466:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1468:	e8 89       	ldd	r30, Y+16	; 0x10
    146a:	f9 89       	ldd	r31, Y+17	; 0x11
    146c:	80 81       	ld	r24, Z
    146e:	83 70       	andi	r24, 0x03	; 3
    1470:	80 64       	ori	r24, 0x40	; 64
    1472:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1474:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	ef 90       	pop	r14
    1486:	08 95       	ret

00001488 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    148e:	88 8d       	ldd	r24, Y+24	; 0x18
    1490:	88 23       	and	r24, r24
    1492:	c9 f0       	breq	.+50     	; 0x14c6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1494:	ea 89       	ldd	r30, Y+18	; 0x12
    1496:	fb 89       	ldd	r31, Y+19	; 0x13
    1498:	80 81       	ld	r24, Z
    149a:	85 fd       	sbrc	r24, 5
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <_ZN14HardwareSerial5flushEv+0x20>
    149e:	a8 89       	ldd	r26, Y+16	; 0x10
    14a0:	b9 89       	ldd	r27, Y+17	; 0x11
    14a2:	8c 91       	ld	r24, X
    14a4:	86 fd       	sbrc	r24, 6
    14a6:	0f c0       	rjmp	.+30     	; 0x14c6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	07 fc       	sbrc	r0, 7
    14ac:	f5 cf       	rjmp	.-22     	; 0x1498 <_ZN14HardwareSerial5flushEv+0x10>
    14ae:	80 81       	ld	r24, Z
    14b0:	85 ff       	sbrs	r24, 5
    14b2:	f2 cf       	rjmp	.-28     	; 0x1498 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    14b4:	a8 89       	ldd	r26, Y+16	; 0x10
    14b6:	b9 89       	ldd	r27, Y+17	; 0x11
    14b8:	8c 91       	ld	r24, X
    14ba:	85 ff       	sbrs	r24, 5
    14bc:	ed cf       	rjmp	.-38     	; 0x1498 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    14be:	ce 01       	movw	r24, r28
    14c0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    14c4:	e7 cf       	rjmp	.-50     	; 0x1494 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	ec 01       	movw	r28, r24
    14dc:	6a 01       	movw	r12, r20
    14de:	7b 01       	movw	r14, r22
    14e0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    14e2:	e8 89       	ldd	r30, Y+16	; 0x10
    14e4:	f9 89       	ldd	r31, Y+17	; 0x11
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    14ea:	41 15       	cp	r20, r1
    14ec:	51 4e       	sbci	r21, 0xE1	; 225
    14ee:	61 05       	cpc	r22, r1
    14f0:	71 05       	cpc	r23, r1
    14f2:	b1 f0       	breq	.+44     	; 0x1520 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	79 e0       	ldi	r23, 0x09	; 9
    14f8:	8d e3       	ldi	r24, 0x3D	; 61
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a7 01       	movw	r20, r14
    14fe:	96 01       	movw	r18, r12
    1500:	0e 94 24 0c 	call	0x1848	; 0x1848 <__udivmodsi4>
    1504:	da 01       	movw	r26, r20
    1506:	c9 01       	movw	r24, r18
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	a1 09       	sbc	r26, r1
    150c:	b1 09       	sbc	r27, r1
    150e:	b6 95       	lsr	r27
    1510:	a7 95       	ror	r26
    1512:	97 95       	ror	r25
    1514:	87 95       	ror	r24
    1516:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1518:	21 15       	cp	r18, r1
    151a:	80 e1       	ldi	r24, 0x10	; 16
    151c:	38 07       	cpc	r19, r24
    151e:	a8 f0       	brcs	.+42     	; 0x154a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1520:	e8 89       	ldd	r30, Y+16	; 0x10
    1522:	f9 89       	ldd	r31, Y+17	; 0x11
    1524:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1526:	60 e8       	ldi	r22, 0x80	; 128
    1528:	74 e8       	ldi	r23, 0x84	; 132
    152a:	8e e1       	ldi	r24, 0x1E	; 30
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a7 01       	movw	r20, r14
    1530:	96 01       	movw	r18, r12
    1532:	0e 94 24 0c 	call	0x1848	; 0x1848 <__udivmodsi4>
    1536:	da 01       	movw	r26, r20
    1538:	c9 01       	movw	r24, r18
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	a1 09       	sbc	r26, r1
    153e:	b1 09       	sbc	r27, r1
    1540:	b6 95       	lsr	r27
    1542:	a7 95       	ror	r26
    1544:	97 95       	ror	r25
    1546:	87 95       	ror	r24
    1548:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    154a:	ec 85       	ldd	r30, Y+12	; 0x0c
    154c:	fd 85       	ldd	r31, Y+13	; 0x0d
    154e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1550:	ee 85       	ldd	r30, Y+14	; 0x0e
    1552:	ff 85       	ldd	r31, Y+15	; 0x0f
    1554:	20 83       	st	Z, r18

  _written = false;
    1556:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1558:	ec 89       	ldd	r30, Y+20	; 0x14
    155a:	fd 89       	ldd	r31, Y+21	; 0x15
    155c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    155e:	ea 89       	ldd	r30, Y+18	; 0x12
    1560:	fb 89       	ldd	r31, Y+19	; 0x13
    1562:	80 81       	ld	r24, Z
    1564:	80 61       	ori	r24, 0x10	; 16
    1566:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1568:	ea 89       	ldd	r30, Y+18	; 0x12
    156a:	fb 89       	ldd	r31, Y+19	; 0x13
    156c:	80 81       	ld	r24, Z
    156e:	88 60       	ori	r24, 0x08	; 8
    1570:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1572:	ea 89       	ldd	r30, Y+18	; 0x12
    1574:	fb 89       	ldd	r31, Y+19	; 0x13
    1576:	80 81       	ld	r24, Z
    1578:	80 68       	ori	r24, 0x80	; 128
    157a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    157c:	ea 89       	ldd	r30, Y+18	; 0x12
    157e:	fb 89       	ldd	r31, Y+19	; 0x13
    1580:	80 81       	ld	r24, Z
    1582:	8f 7d       	andi	r24, 0xDF	; 223
    1584:	80 83       	st	Z, r24
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	df 90       	pop	r13
    1592:	cf 90       	pop	r12
    1594:	08 95       	ret

00001596 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1596:	1f 92       	push	r1
    1598:	0f 92       	push	r0
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	0f 92       	push	r0
    159e:	11 24       	eor	r1, r1
    15a0:	2f 93       	push	r18
    15a2:	8f 93       	push	r24
    15a4:	9f 93       	push	r25
    15a6:	ef 93       	push	r30
    15a8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    15aa:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <Serial+0x10>
    15ae:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <Serial+0x11>
    15b2:	80 81       	ld	r24, Z
    15b4:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <Serial+0x16>
    15b8:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <Serial+0x17>
    15bc:	82 fd       	sbrc	r24, 2
    15be:	12 c0       	rjmp	.+36     	; 0x15e4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    15c0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    15c2:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <Serial+0x19>
    15c6:	8f 5f       	subi	r24, 0xFF	; 255
    15c8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    15ca:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <Serial+0x1a>
    15ce:	82 17       	cp	r24, r18
    15d0:	51 f0       	breq	.+20     	; 0x15e6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    15d2:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <Serial+0x19>
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	e0 53       	subi	r30, 0x30	; 48
    15da:	fe 4f       	sbci	r31, 0xFE	; 254
    15dc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    15de:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <Serial+0x19>
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    15e4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	9f 91       	pop	r25
    15ec:	8f 91       	pop	r24
    15ee:	2f 91       	pop	r18
    15f0:	0f 90       	pop	r0
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	0f 90       	pop	r0
    15f6:	1f 90       	pop	r1
    15f8:	18 95       	reti

000015fa <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    15fa:	1f 92       	push	r1
    15fc:	0f 92       	push	r0
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	0f 92       	push	r0
    1602:	11 24       	eor	r1, r1
    1604:	2f 93       	push	r18
    1606:	3f 93       	push	r19
    1608:	4f 93       	push	r20
    160a:	5f 93       	push	r21
    160c:	6f 93       	push	r22
    160e:	7f 93       	push	r23
    1610:	8f 93       	push	r24
    1612:	9f 93       	push	r25
    1614:	af 93       	push	r26
    1616:	bf 93       	push	r27
    1618:	ef 93       	push	r30
    161a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    161c:	80 ed       	ldi	r24, 0xD0	; 208
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1624:	ff 91       	pop	r31
    1626:	ef 91       	pop	r30
    1628:	bf 91       	pop	r27
    162a:	af 91       	pop	r26
    162c:	9f 91       	pop	r25
    162e:	8f 91       	pop	r24
    1630:	7f 91       	pop	r23
    1632:	6f 91       	pop	r22
    1634:	5f 91       	pop	r21
    1636:	4f 91       	pop	r20
    1638:	3f 91       	pop	r19
    163a:	2f 91       	pop	r18
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1646:	80 ed       	ldi	r24, 0xD0	; 208
    1648:	91 e0       	ldi	r25, 0x01	; 1
    164a:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN14HardwareSerial9availableEv>
    164e:	21 e0       	ldi	r18, 0x01	; 1
    1650:	89 2b       	or	r24, r25
    1652:	09 f4       	brne	.+2      	; 0x1656 <_Z17Serial0_availablev+0x10>
    1654:	20 e0       	ldi	r18, 0x00	; 0
}
    1656:	82 2f       	mov	r24, r18
    1658:	08 95       	ret

0000165a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    165a:	e0 ed       	ldi	r30, 0xD0	; 208
    165c:	f1 e0       	ldi	r31, 0x01	; 1
    165e:	13 82       	std	Z+3, r1	; 0x03
    1660:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1662:	88 ee       	ldi	r24, 0xE8	; 232
    1664:	93 e0       	ldi	r25, 0x03	; 3
    1666:	a0 e0       	ldi	r26, 0x00	; 0
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	84 83       	std	Z+4, r24	; 0x04
    166c:	95 83       	std	Z+5, r25	; 0x05
    166e:	a6 83       	std	Z+6, r26	; 0x06
    1670:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1672:	84 e0       	ldi	r24, 0x04	; 4
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	91 83       	std	Z+1, r25	; 0x01
    1678:	80 83       	st	Z, r24
    167a:	85 ec       	ldi	r24, 0xC5	; 197
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	95 87       	std	Z+13, r25	; 0x0d
    1680:	84 87       	std	Z+12, r24	; 0x0c
    1682:	84 ec       	ldi	r24, 0xC4	; 196
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	97 87       	std	Z+15, r25	; 0x0f
    1688:	86 87       	std	Z+14, r24	; 0x0e
    168a:	80 ec       	ldi	r24, 0xC0	; 192
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	91 8b       	std	Z+17, r25	; 0x11
    1690:	80 8b       	std	Z+16, r24	; 0x10
    1692:	81 ec       	ldi	r24, 0xC1	; 193
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	93 8b       	std	Z+19, r25	; 0x13
    1698:	82 8b       	std	Z+18, r24	; 0x12
    169a:	82 ec       	ldi	r24, 0xC2	; 194
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	95 8b       	std	Z+21, r25	; 0x15
    16a0:	84 8b       	std	Z+20, r24	; 0x14
    16a2:	86 ec       	ldi	r24, 0xC6	; 198
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	97 8b       	std	Z+23, r25	; 0x17
    16a8:	86 8b       	std	Z+22, r24	; 0x16
    16aa:	11 8e       	std	Z+25, r1	; 0x19
    16ac:	12 8e       	std	Z+26, r1	; 0x1a
    16ae:	13 8e       	std	Z+27, r1	; 0x1b
    16b0:	14 8e       	std	Z+28, r1	; 0x1c
    16b2:	08 95       	ret

000016b4 <initVariant>:
    16b4:	08 95       	ret

000016b6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    16b6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <init>

	initVariant();
    16ba:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    16be:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    16c2:	c7 ec       	ldi	r28, 0xC7	; 199
    16c4:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    16c6:	0e 94 06 04 	call	0x80c	; 0x80c <loop>
		if (serialEventRun) serialEventRun();
    16ca:	20 97       	sbiw	r28, 0x00	; 0
    16cc:	e1 f3       	breq	.-8      	; 0x16c6 <main+0x10>
    16ce:	0e 94 c7 09 	call	0x138e	; 0x138e <_Z14serialEventRunv>
    16d2:	f9 cf       	rjmp	.-14     	; 0x16c6 <main+0x10>

000016d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    16d4:	cf 92       	push	r12
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	6c 01       	movw	r12, r24
    16e6:	7a 01       	movw	r14, r20
    16e8:	8b 01       	movw	r16, r22
  size_t n = 0;
    16ea:	c0 e0       	ldi	r28, 0x00	; 0
    16ec:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    16ee:	ce 15       	cp	r28, r14
    16f0:	df 05       	cpc	r29, r15
    16f2:	81 f0       	breq	.+32     	; 0x1714 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    16f4:	d8 01       	movw	r26, r16
    16f6:	6d 91       	ld	r22, X+
    16f8:	8d 01       	movw	r16, r26
    16fa:	d6 01       	movw	r26, r12
    16fc:	ed 91       	ld	r30, X+
    16fe:	fc 91       	ld	r31, X
    1700:	01 90       	ld	r0, Z+
    1702:	f0 81       	ld	r31, Z
    1704:	e0 2d       	mov	r30, r0
    1706:	c6 01       	movw	r24, r12
    1708:	09 95       	icall
    170a:	89 2b       	or	r24, r25
    170c:	11 f0       	breq	.+4      	; 0x1712 <_ZN5Print5writeEPKhj+0x3e>
    170e:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1710:	ee cf       	rjmp	.-36     	; 0x16ee <_ZN5Print5writeEPKhj+0x1a>
    1712:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    1714:	c7 01       	movw	r24, r14
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	08 95       	ret

00001728 <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1728:	1f 92       	push	r1
    172a:	0f 92       	push	r0
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	0f 92       	push	r0
    1730:	11 24       	eor	r1, r1
    1732:	2f 93       	push	r18
    1734:	3f 93       	push	r19
    1736:	8f 93       	push	r24
    1738:	9f 93       	push	r25
    173a:	af 93       	push	r26
    173c:	bf 93       	push	r27
    173e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <timer0_millis>
    1742:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <timer0_millis+0x1>
    1746:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <timer0_millis+0x2>
    174a:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <timer0_millis+0x3>
    174e:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <timer0_fract>
    1752:	23 e0       	ldi	r18, 0x03	; 3
    1754:	23 0f       	add	r18, r19
    1756:	2d 37       	cpi	r18, 0x7D	; 125
    1758:	20 f4       	brcc	.+8      	; 0x1762 <__vector_16+0x3a>
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	a1 1d       	adc	r26, r1
    175e:	b1 1d       	adc	r27, r1
    1760:	05 c0       	rjmp	.+10     	; 0x176c <__vector_16+0x44>
    1762:	26 e8       	ldi	r18, 0x86	; 134
    1764:	23 0f       	add	r18, r19
    1766:	02 96       	adiw	r24, 0x02	; 2
    1768:	a1 1d       	adc	r26, r1
    176a:	b1 1d       	adc	r27, r1
    176c:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <timer0_fract>
    1770:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <timer0_millis>
    1774:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <timer0_millis+0x1>
    1778:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <timer0_millis+0x2>
    177c:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <timer0_millis+0x3>
    1780:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <timer0_overflow_count>
    1784:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <timer0_overflow_count+0x1>
    1788:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <timer0_overflow_count+0x2>
    178c:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <timer0_overflow_count+0x3>
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	a1 1d       	adc	r26, r1
    1794:	b1 1d       	adc	r27, r1
    1796:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <timer0_overflow_count>
    179a:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <timer0_overflow_count+0x1>
    179e:	a0 93 74 02 	sts	0x0274, r26	; 0x800274 <timer0_overflow_count+0x2>
    17a2:	b0 93 75 02 	sts	0x0275, r27	; 0x800275 <timer0_overflow_count+0x3>
    17a6:	bf 91       	pop	r27
    17a8:	af 91       	pop	r26
    17aa:	9f 91       	pop	r25
    17ac:	8f 91       	pop	r24
    17ae:	3f 91       	pop	r19
    17b0:	2f 91       	pop	r18
    17b2:	0f 90       	pop	r0
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	0f 90       	pop	r0
    17b8:	1f 90       	pop	r1
    17ba:	18 95       	reti

000017bc <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    17bc:	82 30       	cpi	r24, 0x02	; 2
    17be:	91 05       	cpc	r25, r1
    17c0:	38 f0       	brcs	.+14     	; 0x17d0 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    17ca:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <delayMicroseconds+0x10>
    17d0:	08 95       	ret

000017d2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    17d2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    17d4:	84 b5       	in	r24, 0x24	; 36
    17d6:	82 60       	ori	r24, 0x02	; 2
    17d8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    17da:	84 b5       	in	r24, 0x24	; 36
    17dc:	81 60       	ori	r24, 0x01	; 1
    17de:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    17e0:	85 b5       	in	r24, 0x25	; 37
    17e2:	82 60       	ori	r24, 0x02	; 2
    17e4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    17e6:	85 b5       	in	r24, 0x25	; 37
    17e8:	81 60       	ori	r24, 0x01	; 1
    17ea:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    17ec:	ee e6       	ldi	r30, 0x6E	; 110
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	81 60       	ori	r24, 0x01	; 1
    17f4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    17f6:	e1 e8       	ldi	r30, 0x81	; 129
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    17fc:	80 81       	ld	r24, Z
    17fe:	82 60       	ori	r24, 0x02	; 2
    1800:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1802:	80 81       	ld	r24, Z
    1804:	81 60       	ori	r24, 0x01	; 1
    1806:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1808:	e0 e8       	ldi	r30, 0x80	; 128
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	81 60       	ori	r24, 0x01	; 1
    1810:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1812:	e1 eb       	ldi	r30, 0xB1	; 177
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	84 60       	ori	r24, 0x04	; 4
    181a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    181c:	e0 eb       	ldi	r30, 0xB0	; 176
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	81 60       	ori	r24, 0x01	; 1
    1824:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1826:	ea e7       	ldi	r30, 0x7A	; 122
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	84 60       	ori	r24, 0x04	; 4
    182e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1830:	80 81       	ld	r24, Z
    1832:	82 60       	ori	r24, 0x02	; 2
    1834:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1836:	80 81       	ld	r24, Z
    1838:	81 60       	ori	r24, 0x01	; 1
    183a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    183c:	80 81       	ld	r24, Z
    183e:	80 68       	ori	r24, 0x80	; 128
    1840:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1842:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1846:	08 95       	ret

00001848 <__udivmodsi4>:
    1848:	a1 e2       	ldi	r26, 0x21	; 33
    184a:	1a 2e       	mov	r1, r26
    184c:	aa 1b       	sub	r26, r26
    184e:	bb 1b       	sub	r27, r27
    1850:	fd 01       	movw	r30, r26
    1852:	0d c0       	rjmp	.+26     	; 0x186e <__udivmodsi4_ep>

00001854 <__udivmodsi4_loop>:
    1854:	aa 1f       	adc	r26, r26
    1856:	bb 1f       	adc	r27, r27
    1858:	ee 1f       	adc	r30, r30
    185a:	ff 1f       	adc	r31, r31
    185c:	a2 17       	cp	r26, r18
    185e:	b3 07       	cpc	r27, r19
    1860:	e4 07       	cpc	r30, r20
    1862:	f5 07       	cpc	r31, r21
    1864:	20 f0       	brcs	.+8      	; 0x186e <__udivmodsi4_ep>
    1866:	a2 1b       	sub	r26, r18
    1868:	b3 0b       	sbc	r27, r19
    186a:	e4 0b       	sbc	r30, r20
    186c:	f5 0b       	sbc	r31, r21

0000186e <__udivmodsi4_ep>:
    186e:	66 1f       	adc	r22, r22
    1870:	77 1f       	adc	r23, r23
    1872:	88 1f       	adc	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	1a 94       	dec	r1
    1878:	69 f7       	brne	.-38     	; 0x1854 <__udivmodsi4_loop>
    187a:	60 95       	com	r22
    187c:	70 95       	com	r23
    187e:	80 95       	com	r24
    1880:	90 95       	com	r25
    1882:	9b 01       	movw	r18, r22
    1884:	ac 01       	movw	r20, r24
    1886:	bd 01       	movw	r22, r26
    1888:	cf 01       	movw	r24, r30
    188a:	08 95       	ret

0000188c <__divmodsi4>:
    188c:	05 2e       	mov	r0, r21
    188e:	97 fb       	bst	r25, 7
    1890:	1e f4       	brtc	.+6      	; 0x1898 <__divmodsi4+0xc>
    1892:	00 94       	com	r0
    1894:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__negsi2>
    1898:	57 fd       	sbrc	r21, 7
    189a:	07 d0       	rcall	.+14     	; 0x18aa <__divmodsi4_neg2>
    189c:	0e 94 24 0c 	call	0x1848	; 0x1848 <__udivmodsi4>
    18a0:	07 fc       	sbrc	r0, 7
    18a2:	03 d0       	rcall	.+6      	; 0x18aa <__divmodsi4_neg2>
    18a4:	4e f4       	brtc	.+18     	; 0x18b8 <__divmodsi4_exit>
    18a6:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__negsi2>

000018aa <__divmodsi4_neg2>:
    18aa:	50 95       	com	r21
    18ac:	40 95       	com	r20
    18ae:	30 95       	com	r19
    18b0:	21 95       	neg	r18
    18b2:	3f 4f       	sbci	r19, 0xFF	; 255
    18b4:	4f 4f       	sbci	r20, 0xFF	; 255
    18b6:	5f 4f       	sbci	r21, 0xFF	; 255

000018b8 <__divmodsi4_exit>:
    18b8:	08 95       	ret

000018ba <__negsi2>:
    18ba:	90 95       	com	r25
    18bc:	80 95       	com	r24
    18be:	70 95       	com	r23
    18c0:	61 95       	neg	r22
    18c2:	7f 4f       	sbci	r23, 0xFF	; 255
    18c4:	8f 4f       	sbci	r24, 0xFF	; 255
    18c6:	9f 4f       	sbci	r25, 0xFF	; 255
    18c8:	08 95       	ret

000018ca <__tablejump2__>:
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	05 90       	lpm	r0, Z+
    18d0:	f4 91       	lpm	r31, Z
    18d2:	e0 2d       	mov	r30, r0
    18d4:	09 94       	ijmp

000018d6 <_exit>:
    18d6:	f8 94       	cli

000018d8 <__stop_program>:
    18d8:	ff cf       	rjmp	.-2      	; 0x18d8 <__stop_program>
